import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { ngxLightAutoplay, ngxLightOptions } from './ngx-light-carousel.model';
import * as ɵngcc0 from '@angular/core';
export declare class NgxCarouselComponent implements AfterViewInit, OnChanges, OnInit, OnDestroy {
    private platformId;
    private _renderer;
    private zone;
    private cd;
    sliderElement: ElementRef;
    btnPrevElement: ElementRef;
    btnNextElement: ElementRef;
    progressContainerElement: ElementRef;
    carouselItems: QueryList<ElementRef>;
    contentPrev: TemplateRef<any>;
    contentNext: TemplateRef<any>;
    dotElm: TemplateRef<any>;
    progressElm: TemplateRef<any>;
    infiniteContainer: ViewContainerRef;
    contentContent: TemplateRef<any>;
    current: number;
    currentChange: EventEmitter<number>;
    data: any[];
    options: ngxLightOptions;
    private infiniteElmRefs;
    private timeLeft;
    private interval;
    private actionDelay;
    dots: number[];
    dotsLoading: boolean;
    loading: boolean;
    grabbing: boolean;
    throttleSub: Observable<any>;
    subRef: Subscription;
    arrowsVisible: boolean;
    carouselItemWidthVar: number;
    constructor(platformId: Object, _renderer: Renderer2, zone: NgZone, cd: ChangeDetectorRef);
    click(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    onResize(): void;
    sufficientSlides(): boolean;
    showArrows(state: boolean): void;
    rootElmWidth(): any;
    carouselItemWidth(): number;
    currentBreakpoint(): import("./ngx-light-carousel.model").ngxLightBreakpoint;
    elements(): {
        rootElement: any;
        containerElement: HTMLElement;
        carouselItems: any[];
    };
    private setViewWidth;
    hover(): void;
    unhover(): void;
    private calculateDots;
    addPanningClass: () => void;
    removePanningClass: () => void;
    addAnimationClass: () => void;
    removeAnimationClass: () => void;
    panTo: (value: number) => void;
    currentIndex: (number?: number) => number;
    slowOnOutOfBounds: (e: any) => any;
    scrollBackToEdge: () => void;
    outOfBound: () => boolean;
    detectSwipingLeft: (e: any) => boolean;
    detectSwipingRight: (e: any) => boolean;
    detectPanningLeft: (e: any) => boolean;
    detectPanningRight: (e: any) => boolean;
    visibleElements(): number;
    nextSlide: () => void;
    prevSlide: () => void;
    addInfiniteElm(): void;
    private infiniteHandler;
    startTimer: () => void;
    pauseTimer: () => void;
    scrollToIndex(number: any): void;
    goToIndex: (number: any) => void;
    infiniteMode(): boolean;
    autoplayMode(): false | ngxLightAutoplay;
    calculateMoved: (e: any) => number;
    moveIndex(move: number): number;
    init(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxCarouselComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxCarouselComponent, "ngx-light-carousel", never, { "current": "current"; "data": "data"; "options": "options"; }, { "currentChange": "currentChange"; }, ["contentPrev", "contentNext", "dotElm", "progressElm", "infiniteContainer", "contentContent", "carouselItems"], ["[ngx-light-carousel-container]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxpZ2h0LWNhcm91c2VsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtbGlnaHQtY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG5neExpZ2h0QXV0b3BsYXksIG5neExpZ2h0T3B0aW9ucyB9IGZyb20gJy4vbmd4LWxpZ2h0LWNhcm91c2VsLm1vZGVsJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4Q2Fyb3VzZWxDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcclxuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSB6b25lO1xyXG4gICAgcHJpdmF0ZSBjZDtcclxuICAgIHNsaWRlckVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgICBidG5QcmV2RWxlbWVudDogRWxlbWVudFJlZjtcclxuICAgIGJ0bk5leHRFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgcHJvZ3Jlc3NDb250YWluZXJFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgY2Fyb3VzZWxJdGVtczogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xyXG4gICAgY29udGVudFByZXY6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBjb250ZW50TmV4dDogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGRvdEVsbTogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIHByb2dyZXNzRWxtOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgaW5maW5pdGVDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgICBjb250ZW50Q29udGVudDogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGN1cnJlbnQ6IG51bWJlcjtcclxuICAgIGN1cnJlbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gICAgZGF0YTogYW55W107XHJcbiAgICBvcHRpb25zOiBuZ3hMaWdodE9wdGlvbnM7XHJcbiAgICBwcml2YXRlIGluZmluaXRlRWxtUmVmcztcclxuICAgIHByaXZhdGUgdGltZUxlZnQ7XHJcbiAgICBwcml2YXRlIGludGVydmFsO1xyXG4gICAgcHJpdmF0ZSBhY3Rpb25EZWxheTtcclxuICAgIGRvdHM6IG51bWJlcltdO1xyXG4gICAgZG90c0xvYWRpbmc6IGJvb2xlYW47XHJcbiAgICBsb2FkaW5nOiBib29sZWFuO1xyXG4gICAgZ3JhYmJpbmc6IGJvb2xlYW47XHJcbiAgICB0aHJvdHRsZVN1YjogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgc3ViUmVmOiBTdWJzY3JpcHRpb247XHJcbiAgICBhcnJvd3NWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgY2Fyb3VzZWxJdGVtV2lkdGhWYXI6IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQ6IE9iamVjdCwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgIGNsaWNrKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBvblJlc2l6ZSgpOiB2b2lkO1xyXG4gICAgc3VmZmljaWVudFNsaWRlcygpOiBib29sZWFuO1xyXG4gICAgc2hvd0Fycm93cyhzdGF0ZTogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICByb290RWxtV2lkdGgoKTogYW55O1xyXG4gICAgY2Fyb3VzZWxJdGVtV2lkdGgoKTogbnVtYmVyO1xyXG4gICAgY3VycmVudEJyZWFrcG9pbnQoKTogaW1wb3J0KFwiLi9uZ3gtbGlnaHQtY2Fyb3VzZWwubW9kZWxcIikubmd4TGlnaHRCcmVha3BvaW50O1xyXG4gICAgZWxlbWVudHMoKToge1xyXG4gICAgICAgIHJvb3RFbGVtZW50OiBhbnk7XHJcbiAgICAgICAgY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgY2Fyb3VzZWxJdGVtczogYW55W107XHJcbiAgICB9O1xyXG4gICAgcHJpdmF0ZSBzZXRWaWV3V2lkdGg7XHJcbiAgICBob3ZlcigpOiB2b2lkO1xyXG4gICAgdW5ob3ZlcigpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVEb3RzO1xyXG4gICAgYWRkUGFubmluZ0NsYXNzOiAoKSA9PiB2b2lkO1xyXG4gICAgcmVtb3ZlUGFubmluZ0NsYXNzOiAoKSA9PiB2b2lkO1xyXG4gICAgYWRkQW5pbWF0aW9uQ2xhc3M6ICgpID0+IHZvaWQ7XHJcbiAgICByZW1vdmVBbmltYXRpb25DbGFzczogKCkgPT4gdm9pZDtcclxuICAgIHBhblRvOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIGN1cnJlbnRJbmRleDogKG51bWJlcj86IG51bWJlcikgPT4gbnVtYmVyO1xyXG4gICAgc2xvd09uT3V0T2ZCb3VuZHM6IChlOiBhbnkpID0+IGFueTtcclxuICAgIHNjcm9sbEJhY2tUb0VkZ2U6ICgpID0+IHZvaWQ7XHJcbiAgICBvdXRPZkJvdW5kOiAoKSA9PiBib29sZWFuO1xyXG4gICAgZGV0ZWN0U3dpcGluZ0xlZnQ6IChlOiBhbnkpID0+IGJvb2xlYW47XHJcbiAgICBkZXRlY3RTd2lwaW5nUmlnaHQ6IChlOiBhbnkpID0+IGJvb2xlYW47XHJcbiAgICBkZXRlY3RQYW5uaW5nTGVmdDogKGU6IGFueSkgPT4gYm9vbGVhbjtcclxuICAgIGRldGVjdFBhbm5pbmdSaWdodDogKGU6IGFueSkgPT4gYm9vbGVhbjtcclxuICAgIHZpc2libGVFbGVtZW50cygpOiBudW1iZXI7XHJcbiAgICBuZXh0U2xpZGU6ICgpID0+IHZvaWQ7XHJcbiAgICBwcmV2U2xpZGU6ICgpID0+IHZvaWQ7XHJcbiAgICBhZGRJbmZpbml0ZUVsbSgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBpbmZpbml0ZUhhbmRsZXI7XHJcbiAgICBzdGFydFRpbWVyOiAoKSA9PiB2b2lkO1xyXG4gICAgcGF1c2VUaW1lcjogKCkgPT4gdm9pZDtcclxuICAgIHNjcm9sbFRvSW5kZXgobnVtYmVyOiBhbnkpOiB2b2lkO1xyXG4gICAgZ29Ub0luZGV4OiAobnVtYmVyOiBhbnkpID0+IHZvaWQ7XHJcbiAgICBpbmZpbml0ZU1vZGUoKTogYm9vbGVhbjtcclxuICAgIGF1dG9wbGF5TW9kZSgpOiBmYWxzZSB8IG5neExpZ2h0QXV0b3BsYXk7XHJcbiAgICBjYWxjdWxhdGVNb3ZlZDogKGU6IGFueSkgPT4gbnVtYmVyO1xyXG4gICAgbW92ZUluZGV4KG1vdmU6IG51bWJlcik6IG51bWJlcjtcclxuICAgIGluaXQoKTogdm9pZDtcclxufVxyXG4iXX0=