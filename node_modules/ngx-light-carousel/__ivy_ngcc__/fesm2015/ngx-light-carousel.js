import { __decorate, __metadata, __param } from 'tslib';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { Directive, EventEmitter, Inject, PLATFORM_ID, Renderer2, NgZone, ChangeDetectorRef, ViewChild, ElementRef, ContentChildren, QueryList, ContentChild, TemplateRef, ViewContainerRef, Input, Output, HostListener, Component, ViewEncapsulation, NgModule } from '@angular/core';
import { Manager, Pan } from 'hammerjs';
import { Subject, interval } from 'rxjs';
import { throttle } from 'rxjs/operators';
import { FormsModule } from '@angular/forms';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["carouselPrev"];
const _c1 = ["carouselNext"];
const _c2 = ["carouselDot"];
const _c3 = ["carouselProgress"];
const _c4 = ["infiniteContainer"];
const _c5 = ["carouselContent"];
const _c6 = ["sliderElement"];
const _c7 = ["prevElement"];
const _c8 = ["nextElement"];
const _c9 = ["progressElement"];
function NgxCarouselComponent_div_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function NgxCarouselComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7, 8);
    ɵngcc0.ɵɵlistener("click", function NgxCarouselComponent_div_3_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.prevSlide(); });
    ɵngcc0.ɵɵtemplate(2, NgxCarouselComponent_div_3_ng_container_2_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.contentPrev);
} }
function NgxCarouselComponent_div_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function NgxCarouselComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10, 11);
    ɵngcc0.ɵɵlistener("click", function NgxCarouselComponent_div_4_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.nextSlide(); });
    ɵngcc0.ɵɵtemplate(2, NgxCarouselComponent_div_4_ng_container_2_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.contentNext);
} }
function NgxCarouselComponent_div_5_li_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c10 = function (a0) { return { active: a0 }; };
function NgxCarouselComponent_div_5_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵlistener("click", function NgxCarouselComponent_div_5_li_1_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const i_r15 = ctx.index; const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.scrollToIndex(i_r15); });
    ɵngcc0.ɵɵelement(1, "div", 15);
    ɵngcc0.ɵɵtemplate(2, NgxCarouselComponent_div_5_li_1_ng_container_2_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r15 = ctx.index;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c10, ctx_r13.current == i_r15));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r13.dotElm);
} }
function NgxCarouselComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, NgxCarouselComponent_div_5_li_1_Template, 3, 4, "li", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.dots);
} }
function NgxCarouselComponent_div_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function NgxCarouselComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", null, 16);
    ɵngcc0.ɵɵtemplate(2, NgxCarouselComponent_div_6_ng_container_2_Template, 1, 0, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.progressElm);
} }
const _c11 = [[["", "ngx-light-carousel-container", ""]]];
const _c12 = ["[ngx-light-carousel-container]"];
let NgxCarouselItemDirective = class NgxCarouselItemDirective {
    constructor() { }
};
NgxCarouselItemDirective.ɵfac = function NgxCarouselItemDirective_Factory(t) { return new (t || NgxCarouselItemDirective)(); };
NgxCarouselItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxCarouselItemDirective, selectors: [["", "ngx-light-carousel-item", ""]] });
NgxCarouselItemDirective = __decorate([ __metadata("design:paramtypes", [])
], NgxCarouselItemDirective);

class ngxLightOptions {
    constructor() {
        this.indicators = true;
        this.arrows = true;
    }
}
class ngxLightBreakpoint {
}
class ngxLightAutoplay {
}

let NgxCarouselComponent = class NgxCarouselComponent {
    constructor(platformId, _renderer, zone, cd) {
        this.platformId = platformId;
        this._renderer = _renderer;
        this.zone = zone;
        this.cd = cd;
        this.current = 0;
        this.currentChange = new EventEmitter();
        this.infiniteElmRefs = [];
        this.timeLeft = 2000;
        this.dotsLoading = true;
        this.loading = true;
        this.grabbing = false;
        this.arrowsVisible = true;
        this.addPanningClass = () => {
            this.grabbing = true;
            this._renderer.addClass(this.elements().rootElement, 'grabbing');
            this._renderer.addClass(this.elements().containerElement, 'panning');
        };
        this.removePanningClass = () => {
            this.grabbing = false;
            this._renderer.removeClass(this.elements().rootElement, 'grabbing');
            this._renderer.removeClass(this.elements().containerElement, 'panning');
        };
        this.addAnimationClass = () => {
            if (this.options.animation.animationClass !== '') {
                this._renderer.addClass(this.elements().containerElement, this.options.animation.animationClass);
            }
        };
        this.removeAnimationClass = () => {
            if (this.options.animation.animationClass !== '') {
                this._renderer.removeClass(this.elements().containerElement, this.options.animation.animationClass);
            }
        };
        this.panTo = (value) => {
            if (isPlatformBrowser(this.platformId)) {
                this._renderer.setStyle(this.elements().containerElement, 'transform', `translate3d(${value}px, 0,0)`);
            }
            else {
                this._renderer.setStyle(this.elements().containerElement, 'transform', `translate3d(${value}%, 0,0)`);
            }
        };
        this.currentIndex = (number) => {
            if (!this.infiniteMode() && number !== undefined) {
                if (number >= 0) {
                    if (number < 0) {
                        this.current = 0;
                        // } else if (this.currentBreakpoint().number % 1 != 0 && this.current - 1 > this.data.length) {
                        // 	this.current = this.data.length + 1 - this.currentBreakpoint().number
                    }
                    else if (number > this.data.length - this.currentBreakpoint().number) {
                        this.current = this.data.length - this.currentBreakpoint().number;
                    }
                    else {
                        this.current = number;
                    }
                }
            }
            else if (number != undefined) {
                this.current = number;
            }
            return this.current;
        };
        this.slowOnOutOfBounds = e => {
            if (!this.options.infinite && this.outOfBound()) {
                e.deltaX *= 0.2;
                e.deltaY *= 0.2;
            }
            return e;
        };
        this.scrollBackToEdge = () => {
            const root = this.elements().rootElement.getBoundingClientRect();
            const container = this.elements().containerElement.getBoundingClientRect();
            if (container.right < root.right) {
                this.goToIndex(this.visibleElements());
            }
            if (root.left - container.left < 0) {
                this.goToIndex(0);
            }
        };
        this.outOfBound = () => {
            const root = this.elements().rootElement.getBoundingClientRect();
            const container = this.elements().containerElement.getBoundingClientRect();
            if (root.right - container.right > 0) {
                this.currentIndex(this.data.length - 1);
                return true;
            }
            if (root.left - container.left < 0) {
                this.currentIndex(0);
                return true;
            }
            return false;
        };
        this.detectSwipingLeft = e => {
            return e.velocityX < -this.options.swipe.swipeVelocity;
        };
        this.detectSwipingRight = e => {
            return e.velocityX > this.options.swipe.swipeVelocity;
        };
        this.detectPanningLeft = e => {
            return e.velocityX < 1 && e.distance < -this.carouselItemWidthVar * 1.5;
        };
        this.detectPanningRight = e => {
            return e.velocityX > 1 && e.distance < this.carouselItemWidthVar * 1.5;
        };
        this.nextSlide = () => {
            this.addAnimationClass();
            if (this.data.length > 1) {
                if (!this.infiniteMode() && this.visibleElements() < this.currentIndex()) {
                    this.goToIndex(this.visibleElements());
                }
                else {
                    this.goToIndex(this.currentIndex() + 1);
                }
            }
            setTimeout(() => {
                this.removeAnimationClass();
            }, this.options.animation.animationTime);
        };
        this.prevSlide = () => {
            this.addAnimationClass();
            if (this.data.length > 1) {
                if (!this.infiniteMode() && 0 >= this.currentIndex()) {
                    this.goToIndex(this.currentIndex(0));
                }
                else {
                    this.goToIndex(this.currentIndex() - 1);
                }
            }
            setTimeout(() => {
                this.removeAnimationClass();
            }, this.options.animation.animationTime);
        };
        this.startTimer = () => {
            this.zone.runOutsideAngular(() => {
                var autoplay = this.autoplayMode();
                if (autoplay && autoplay.enabled) {
                    this.interval = setInterval(() => {
                        if (this.timeLeft > 0) {
                            this.timeLeft = this.timeLeft - 100;
                        }
                        else {
                            this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                            this.actionDelay.next(autoplay.direction == 'left' ? this.prevSlide : this.nextSlide);
                        }
                    }, 100);
                }
            });
        };
        this.pauseTimer = () => {
            this.zone.runOutsideAngular(() => {
                try {
                    var autoplay = this.autoplayMode();
                    if (autoplay && autoplay.enabled) {
                        this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                        clearInterval(this.interval);
                    }
                    this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                    delete this.interval;
                }
                catch (_a) { }
            });
        };
        this.goToIndex = number => {
            if (this.infiniteMode()) {
                this.panTo(-this.carouselItemWidth() * number);
            }
            else {
                if (number > -1 && number <= this.data.length - this.currentBreakpoint().number) {
                    this.currentIndex(number);
                    this.panTo(-this.carouselItemWidth() * number);
                }
                if (number <= -1) {
                    this.currentIndex(0);
                    this.goToIndex(0);
                }
            }
            this.currentIndex(number);
        };
        this.calculateMoved = e => {
            const moved = Math.round(Math.abs(e.deltaX) / this.carouselItemWidth());
            return moved > 0 ? moved : 1;
        };
        this.loading = true;
        this.actionDelay = new Subject();
        this.throttleSub = this.actionDelay.asObservable();
        this.subRef = this.throttleSub.pipe(throttle(val => interval(this.options.animation.animationTime + 40))).subscribe(data => {
            data();
        });
    }
    click(fn) {
        this.actionDelay.next(fn);
    }
    ngOnInit() {
        this.dots = [];
    }
    ngAfterViewInit() {
        this.init();
        this.loading = false;
        if (this.sufficientSlides()) {
            if (this.infiniteMode()) {
                this.addInfiniteElm();
            }
            if (this.autoplayMode()) {
                this.startTimer();
            }
        }
        this.goToIndex(this.current);
        this.rootElmWidth;
        this.setViewWidth();
        this.calculateDots();
    }
    ngOnChanges() {
        if (this.elements()) {
            this.onResize();
        }
    }
    ngOnDestroy() {
        this.pauseTimer();
        this.subRef.unsubscribe();
    }
    onResize() {
        this.rootElmWidth;
        this.setViewWidth();
        this.calculateDots();
        if (this.sufficientSlides()) {
            if (this.infiniteMode()) {
                this.addInfiniteElm();
            }
        }
        this.goToIndex(this.currentIndex());
    }
    sufficientSlides() {
        this.showArrows(this.data.length > this.currentBreakpoint().number);
        return this.data.length > this.currentBreakpoint().number;
    }
    showArrows(state) {
        this.arrowsVisible = state;
    }
    rootElmWidth() {
        return isPlatformBrowser(this.platformId) ? this.elements().rootElement.getBoundingClientRect().width : 100;
    }
    carouselItemWidth() {
        if (this.data.length > this.currentBreakpoint().number) {
            return (this.carouselItemWidthVar = this.rootElmWidth() / this.currentBreakpoint().number);
        }
        else {
            return (this.carouselItemWidthVar = this.rootElmWidth() / this.data.length);
        }
    }
    currentBreakpoint() {
        for (let i = 0; i < this.options.breakpoints.length; i++) {
            if (this.options.breakpoints[i].width > this.rootElmWidth()) {
                return this.options.breakpoints[i];
            }
        }
    }
    elements() {
        if (this.sliderElement) {
            return {
                rootElement: this.sliderElement.nativeElement,
                containerElement: this.sliderElement.nativeElement.children[0],
                carouselItems: this.carouselItems.toArray().map(x => x.nativeElement),
            };
        }
        return;
    }
    setViewWidth() {
        this._renderer.setStyle(this.elements().containerElement, 'display', 'inline-flex');
        this._renderer.setStyle(this.elements().containerElement, 'position', 'relative');
        this.elements().carouselItems.forEach((element) => {
            this._renderer.addClass(element, 'slide');
            this._renderer.setStyle(element, 'width', this.carouselItemWidth() + 'px');
            this._renderer.setStyle(element, 'display', 'inline-flex');
        });
        if (this.infiniteMode()) {
            this.infiniteElmRefs.forEach(ref => {
                this._renderer.addClass(ref.rootNodes[0], 'slide');
                this._renderer.setStyle(ref.rootNodes[0], 'width', this.carouselItemWidth() + 'px');
            });
        }
    }
    hover() {
        if (this.autoplayMode()) {
            if (this.autoplayMode().stopOnHover) {
                this.pauseTimer();
            }
        }
    }
    unhover() {
        if (this.autoplayMode()) {
            this.pauseTimer();
            this.startTimer();
        }
    }
    calculateDots() {
        this.dots = [];
        if (this.infiniteMode()) {
            var number = this.data.length;
        }
        else {
            var number = this.data.length - this.currentBreakpoint().number + 1;
        }
        if (number > 1) {
            let results = Array.from(Array(Number(number.toFixed(0))).keys());
            this.dots = results;
            this.dotsLoading = false;
            return results;
        }
        else {
            let results = [];
            this.dots = [];
            this.dotsLoading = false;
            return results;
        }
    }
    visibleElements() {
        return this.data.length - this.currentBreakpoint().number;
    }
    addInfiniteElm() {
        this.infiniteElmRefs = [];
        this.infiniteContainer.clear();
        for (let i = 1; i <= this.data.length; i++) {
            const elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[this.data.length - i],
                index: this.data.length - i,
            });
            this._renderer.setStyle(elm.rootNodes[0], 'position', 'absolute');
            this._renderer.setStyle(elm.rootNodes[0], 'transform', `translate3d(-${100 * i}%, 0,0)`);
            this._renderer.setStyle(elm.rootNodes[0], 'display', 'inline-flex');
            this._renderer.setStyle(elm.rootNodes[0], 'visibility', 'visible');
            this._renderer.setStyle(elm.rootNodes[0], 'width', this.carouselItemWidthVar + 'px');
            this._renderer.addClass(elm.rootNodes[0], 'slide');
            const elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[i - 1],
                index: i - 1,
            });
            this._renderer.setStyle(elm2.rootNodes[0], 'position', 'absolute');
            this._renderer.setStyle(elm2.rootNodes[0], 'right', 0);
            this._renderer.setStyle(elm2.rootNodes[0], 'top', 0);
            this._renderer.setStyle(elm2.rootNodes[0], 'transform', `translate3d(${100 * i}%, 0,0)`);
            this._renderer.setStyle(elm2.rootNodes[0], 'display', 'inline-flex');
            this._renderer.setStyle(elm2.rootNodes[0], 'visibility', 'visible');
            this._renderer.setStyle(elm2.rootNodes[0], 'width', this.carouselItemWidthVar + 'px');
            this._renderer.addClass(elm2.rootNodes[0], 'slide');
            elm.detectChanges();
            elm2.detectChanges();
            this.infiniteElmRefs.push(elm);
            this.infiniteElmRefs.push(elm2);
        }
    }
    infiniteHandler() {
        // this.removePanningClass()
        this.addAnimationClass();
        setTimeout(() => {
            this.goToIndex(this.currentIndex());
            this.removeAnimationClass();
        }, this.options.animation.animationTime);
        if (0 > this.currentIndex()) {
            this.currentIndex(this.data.length - 1);
            setTimeout(() => {
                this.removeAnimationClass();
                this.goToIndex(this.currentIndex(this.data.length - 1));
            }, this.options.animation.animationTime + 10);
        }
        else if (this.data.length - 1 < this.currentIndex()) {
            this.currentIndex(0);
            setTimeout(() => {
                this.removeAnimationClass();
                this.goToIndex(this.currentIndex(0));
            }, this.options.animation.animationTime + 10);
        }
        return;
    }
    scrollToIndex(number) {
        this.addAnimationClass();
        this.goToIndex(number);
    }
    infiniteMode() {
        return this.options.infinite;
    }
    autoplayMode() {
        if (this.options.autoplay && this.options.autoplay.enabled) {
            return this.options.autoplay;
        }
        else {
            return false;
        }
    }
    moveIndex(move) {
        return this.currentIndex() + move;
    }
    init() {
        this.zone.runOutsideAngular(() => {
            if (this.data.length > 1 && this.sufficientSlides()) {
                var sliderManager = new Manager(this.elements().containerElement);
                sliderManager.add(new Pan({ threshold: 0, pointers: 0 }));
                sliderManager.on('panleft panright panend pancancel', (e) => {
                    switch (e.type) {
                        case 'panleft':
                        case 'panright':
                            this.pauseTimer();
                            if (!this.grabbing) {
                                this.removeAnimationClass();
                                this.addPanningClass();
                            }
                            if (this.options.drag.draggable) {
                                this.panTo(-this.current * this.carouselItemWidthVar + 0 + e.deltaX);
                            }
                            break;
                        case 'pancancel':
                            this.removePanningClass();
                            this.addAnimationClass();
                            this.goToIndex(this.currentIndex());
                            break;
                        case 'panend':
                            // e.gesture.srcEvent.preventDefault()
                            this.pauseTimer();
                            this.removePanningClass();
                            this.addAnimationClass();
                            let moved = this.calculateMoved(e);
                            if (!this.infiniteMode()) {
                                if (this.outOfBound()) {
                                    this.scrollBackToEdge();
                                    setTimeout(() => {
                                        this.removeAnimationClass();
                                    }, this.options.animation.animationTime);
                                    break;
                                }
                            }
                            if (this.options.drag.draggable) {
                                if (this.detectPanningLeft(e)) {
                                    this.addAnimationClass();
                                    this.goToIndex(this.moveIndex(+moved));
                                    this.infiniteHandler();
                                    setTimeout(() => {
                                        this.removeAnimationClass();
                                    }, this.options.animation.animationTime);
                                    break;
                                }
                                if (this.detectPanningRight(e)) {
                                    this.addAnimationClass();
                                    if (1.00000001 < this.currentIndex() && this.currentIndex() < 1.999999999999) {
                                        this.goToIndex(Math.ceil(this.moveIndex(-moved)));
                                    }
                                    else {
                                        this.goToIndex(this.moveIndex(-moved));
                                    }
                                    this.infiniteHandler();
                                    setTimeout(() => {
                                        this.removeAnimationClass();
                                    }, this.options.animation.animationTime);
                                    break;
                                }
                            }
                            if (this.options.swipe.swipeable) {
                                if (this.detectSwipingLeft(e)) {
                                    this.nextSlide();
                                    this.infiniteHandler();
                                    if (!this.infiniteMode()) {
                                        this.addAnimationClass();
                                        if (0.00000001 < this.currentIndex() && this.currentIndex() < 0.999999999999) {
                                            this.removeAnimationClass();
                                            this.goToIndex(0);
                                        }
                                    }
                                    break;
                                }
                                if (this.detectSwipingRight(e)) {
                                    this.prevSlide();
                                    this.infiniteHandler();
                                    if (!this.infiniteMode()) {
                                        if (0.00000001 < this.currentIndex() && this.currentIndex() < 0.999999999999) {
                                            this.addAnimationClass();
                                            this.goToIndex(0);
                                            this.removeAnimationClass();
                                        }
                                    }
                                    break;
                                }
                            }
                        // this.addAnimationClass()
                        // this.goToIndex(this.currentIndex())
                        // setTimeout(() => {
                        // 	this.removeAnimationClass()
                        // }, this.options.animation.animationTime)
                        // e.gesture.srcEvent.preventDefault()
                    }
                });
                return sliderManager;
            }
        });
    }
};
NgxCarouselComponent.ɵfac = function NgxCarouselComponent_Factory(t) { return new (t || NgxCarouselComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NgxCarouselComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxCarouselComponent, selectors: [["ngx-light-carousel"]], contentQueries: function NgxCarouselComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, true, ViewContainerRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxCarouselItemDirective, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentPrev = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentNext = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dotElm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.progressElm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infiniteContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.carouselItems = _t);
    } }, viewQuery: function NgxCarouselComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c6, true);
        ɵngcc0.ɵɵviewQuery(_c7, true);
        ɵngcc0.ɵɵviewQuery(_c8, true);
        ɵngcc0.ɵɵviewQuery(_c9, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sliderElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.btnPrevElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.btnNextElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.progressContainerElement = _t.first);
    } }, hostBindings: function NgxCarouselComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("resize", function NgxCarouselComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, ɵngcc0.ɵɵresolveWindow)("mouseover", function NgxCarouselComponent_mouseover_HostBindingHandler() { return ctx.hover(); })("mouseout", function NgxCarouselComponent_mouseout_HostBindingHandler() { return ctx.unhover(); });
    } }, inputs: { current: "current", data: "data", options: "options" }, outputs: { currentChange: "currentChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c12, decls: 9, vars: 4, consts: [[1, "carousel"], ["sliderElement", ""], ["class", "direction left", 3, "click", 4, "ngIf"], ["class", "direction right", 3, "click", 4, "ngIf"], ["class", "indicators", 4, "ngIf"], [4, "ngIf"], [1, "mask"], [1, "direction", "left", 3, "click"], ["prevElement", ""], [4, "ngTemplateOutlet"], [1, "direction", "right", 3, "click"], ["nextElement", ""], [1, "indicators"], [3, "ngClass", "click", 4, "ngFor", "ngForOf"], [3, "ngClass", "click"], [1, "ball"], ["progressElement", ""]], template: function NgxCarouselComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c11);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵprojection(2, 0, ["class", "content"]);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, NgxCarouselComponent_div_3_Template, 3, 1, "div", 2);
        ɵngcc0.ɵɵtemplate(4, NgxCarouselComponent_div_4_Template, 3, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(5, NgxCarouselComponent_div_5_Template, 2, 1, "div", 4);
        ɵngcc0.ɵɵtemplate(6, NgxCarouselComponent_div_6_Template, 3, 1, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "div", 6);
        ɵngcc0.ɵɵelementContainer(8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.arrows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.arrows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.indicators);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.progressElm && ctx.options.autoplay);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, ɵngcc1.NgClass], styles: [".transition *{transition:transform .2s ease-out!important}:host{position:relative}.wrapper{padding-bottom:20px;position:relative;overflow-x:hidden;overflow-y:auto}.panning img{pointer-events:none}.carousel{overflow-x:hidden;position:relative;width:100%;height:100%;padding-bottom:30px}.carousel .content{display:-ms-inline-flexbox;display:inline-flex}.content{-ms-touch-action:pan-y!important;touch-action:pan-y!important;-webkit-backface-visibility:hidden;backface-visibility:hidden;will-change:transform,opacity;transform:translate3d();-ms-perspective:1000;perspective:1000;transform:translateZ(0)}.content article{width:100%;display:block}.content article img{width:100%;display:block;background-size:cover;background-position:center}.slide{will-change:transform,opacity;transform:translate3d();-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000;-moz-perspective:1000;-ms-perspective:1000;transform:translateZ(0);perspective:1000}.direction{background-repeat:no-repeat;width:5%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none;position:absolute;height:100%;cursor:pointer;background-size:50%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;top:0;background-position:center center}.direction.left{left:0;background-image:url(\"data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20style%3D%22transform%3A%20scale(-1%2C1)%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E\")}.direction.right{right:0;background-image:url(data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E)}ul.indicators{bottom:0;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}ul.indicators li.active *{color:#000}.active .ball{background:#000;color:#000;opacity:1}.ball{width:10px;height:10px;border-radius:50%;background:#fff;border:2px solid #000}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{pointer-events:none;position:absolute;left:0;top:0;right:0;bottom:0}"], encapsulation: 2 });
NgxCarouselComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Renderer2 },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
__decorate([
    ViewChild('sliderElement', { static: false }),
    __metadata("design:type", ElementRef)
], NgxCarouselComponent.prototype, "sliderElement", void 0);
__decorate([
    ViewChild('prevElement', { static: false }),
    __metadata("design:type", ElementRef)
], NgxCarouselComponent.prototype, "btnPrevElement", void 0);
__decorate([
    ViewChild('nextElement', { static: false }),
    __metadata("design:type", ElementRef)
], NgxCarouselComponent.prototype, "btnNextElement", void 0);
__decorate([
    ViewChild('progressElement', { static: false }),
    __metadata("design:type", ElementRef)
], NgxCarouselComponent.prototype, "progressContainerElement", void 0);
__decorate([
    ContentChildren(NgxCarouselItemDirective, { read: ElementRef, descendants: true }),
    __metadata("design:type", QueryList)
], NgxCarouselComponent.prototype, "carouselItems", void 0);
__decorate([
    ContentChild('carouselPrev', { static: false }),
    __metadata("design:type", TemplateRef)
], NgxCarouselComponent.prototype, "contentPrev", void 0);
__decorate([
    ContentChild('carouselNext', { static: false }),
    __metadata("design:type", TemplateRef)
], NgxCarouselComponent.prototype, "contentNext", void 0);
__decorate([
    ContentChild('carouselDot', { static: false }),
    __metadata("design:type", TemplateRef)
], NgxCarouselComponent.prototype, "dotElm", void 0);
__decorate([
    ContentChild('carouselProgress', { static: false }),
    __metadata("design:type", TemplateRef)
], NgxCarouselComponent.prototype, "progressElm", void 0);
__decorate([
    ContentChild('infiniteContainer', { static: false, read: ViewContainerRef }),
    __metadata("design:type", ViewContainerRef)
], NgxCarouselComponent.prototype, "infiniteContainer", void 0);
__decorate([
    ContentChild('carouselContent', { static: false }),
    __metadata("design:type", TemplateRef)
], NgxCarouselComponent.prototype, "contentContent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NgxCarouselComponent.prototype, "current", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgxCarouselComponent.prototype, "currentChange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgxCarouselComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", ngxLightOptions)
], NgxCarouselComponent.prototype, "options", void 0);
__decorate([
    HostListener('window:resize'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NgxCarouselComponent.prototype, "onResize", null);
__decorate([
    HostListener('mouseover'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NgxCarouselComponent.prototype, "hover", null);
__decorate([
    HostListener('mouseout'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NgxCarouselComponent.prototype, "unhover", null);
NgxCarouselComponent = __decorate([ __param(0, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [Object, Renderer2, NgZone, ChangeDetectorRef])
], NgxCarouselComponent);

let NgxCarouselModule = class NgxCarouselModule {
};
NgxCarouselModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCarouselModule });
NgxCarouselModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCarouselModule_Factory(t) { return new (t || NgxCarouselModule)(); }, imports: [[CommonModule, FormsModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCarouselItemDirective, [{
        type: Directive,
        args: [{
                selector: '[ngx-light-carousel-item]'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCarouselComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-light-carousel',
                template: "<div #sliderElement class=\"carousel\">\n\t<!-- Carousel Content -->\n\t<ng-content class=\"content\" select=\"[ngx-light-carousel-container]\"> </ng-content>\n</div>\n<!-- Previous Slide -->\n<div *ngIf=\"options.arrows\" #prevElement (click)=\"prevSlide()\" class=\"direction left\">\n\t<ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n</div>\n<!-- Next Slide -->\n<div *ngIf=\"options.arrows\" #nextElement (click)=\"nextSlide()\" class=\"direction right\">\n\t<ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n</div>\n<!-- Dots -->\n<div *ngIf=\"options.indicators\" class=\"indicators\">\n\t<li *ngFor=\"let dot of dots; let i = index\" (click)=\"scrollToIndex(i)\" [ngClass]=\"{ active: current == i }\">\n\t\t<div class=\"ball\"></div>\n\t\t<ng-container *ngTemplateOutlet=\"dotElm\"> </ng-container>\n\t</li>\n</div>\n<!-- Progress -->\n<div *ngIf=\"progressElm && options.autoplay\" #progressElement>\n\t<ng-container *ngTemplateOutlet=\"progressElm\"> </ng-container>\n</div>\n<!-- Mask -->\n<div class=\"mask\">\n\t<ng-container></ng-container>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".transition *{transition:transform .2s ease-out!important}:host{position:relative}.wrapper{padding-bottom:20px;position:relative;overflow-x:hidden;overflow-y:auto}.panning img{pointer-events:none}.carousel{overflow-x:hidden;position:relative;width:100%;height:100%;padding-bottom:30px}.carousel .content{display:-ms-inline-flexbox;display:inline-flex}.content{-ms-touch-action:pan-y!important;touch-action:pan-y!important;-webkit-backface-visibility:hidden;backface-visibility:hidden;will-change:transform,opacity;transform:translate3d();-ms-perspective:1000;perspective:1000;transform:translateZ(0)}.content article{width:100%;display:block}.content article img{width:100%;display:block;background-size:cover;background-position:center}.slide{will-change:transform,opacity;transform:translate3d();-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000;-moz-perspective:1000;-ms-perspective:1000;transform:translateZ(0);perspective:1000}.direction{background-repeat:no-repeat;width:5%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none;position:absolute;height:100%;cursor:pointer;background-size:50%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;top:0;background-position:center center}.direction.left{left:0;background-image:url(\"data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20style%3D%22transform%3A%20scale(-1%2C1)%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E\")}.direction.right{right:0;background-image:url(data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E)}ul.indicators{bottom:0;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}ul.indicators li.active *{color:#000}.active .ball{background:#000;color:#000;opacity:1}.ball{width:10px;height:10px;border-radius:50%;background:#fff;border:2px solid #000}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{pointer-events:none;position:absolute;left:0;top:0;right:0;bottom:0}"]
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }]; }, { current: [{
            type: Input
        }], currentChange: [{
            type: Output
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }], hover: [{
            type: HostListener,
            args: ['mouseover']
        }], unhover: [{
            type: HostListener,
            args: ['mouseout']
        }], sliderElement: [{
            type: ViewChild,
            args: ['sliderElement', { static: false }]
        }], btnPrevElement: [{
            type: ViewChild,
            args: ['prevElement', { static: false }]
        }], btnNextElement: [{
            type: ViewChild,
            args: ['nextElement', { static: false }]
        }], progressContainerElement: [{
            type: ViewChild,
            args: ['progressElement', { static: false }]
        }], carouselItems: [{
            type: ContentChildren,
            args: [NgxCarouselItemDirective, { read: ElementRef, descendants: true }]
        }], contentPrev: [{
            type: ContentChild,
            args: ['carouselPrev', { static: false }]
        }], contentNext: [{
            type: ContentChild,
            args: ['carouselNext', { static: false }]
        }], dotElm: [{
            type: ContentChild,
            args: ['carouselDot', { static: false }]
        }], progressElm: [{
            type: ContentChild,
            args: ['carouselProgress', { static: false }]
        }], infiniteContainer: [{
            type: ContentChild,
            args: ['infiniteContainer', { static: false, read: ViewContainerRef }]
        }], contentContent: [{
            type: ContentChild,
            args: ['carouselContent', { static: false }]
        }], data: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCarouselModule, { declarations: function () { return [NgxCarouselComponent,
        NgxCarouselItemDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [NgxCarouselComponent,
        NgxCarouselItemDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCarouselModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NgxCarouselComponent, NgxCarouselItemDirective],
                exports: [NgxCarouselComponent, NgxCarouselItemDirective]
            }]
    }], null, null); })();

/*
 * Public API Surface of ngx-light-carousel
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxCarouselComponent, NgxCarouselItemDirective, NgxCarouselModule, ngxLightAutoplay, ngxLightBreakpoint, ngxLightOptions };

//# sourceMappingURL=ngx-light-carousel.js.map