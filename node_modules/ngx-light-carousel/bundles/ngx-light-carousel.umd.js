(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('hammerjs'), require('rxjs'), require('rxjs/operators'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-light-carousel', ['exports', '@angular/common', '@angular/core', 'hammerjs', 'rxjs', 'rxjs/operators', '@angular/forms'], factory) :
    (global = global || self, factory(global['ngx-light-carousel'] = {}, global.ng.common, global.ng.core, global.hammerjs, global.rxjs, global.rxjs.operators, global.ng.forms));
}(this, (function (exports, common, core, hammerjs, rxjs, operators, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var NgxCarouselItemDirective = /** @class */ (function () {
        function NgxCarouselItemDirective() {
        }
        NgxCarouselItemDirective = __decorate([
            core.Directive({
                selector: '[ngx-light-carousel-item]',
            }),
            __metadata("design:paramtypes", [])
        ], NgxCarouselItemDirective);
        return NgxCarouselItemDirective;
    }());

    var ngxLightOptions = /** @class */ (function () {
        function ngxLightOptions() {
            this.indicators = true;
            this.arrows = true;
        }
        return ngxLightOptions;
    }());
    var ngxLightBreakpoint = /** @class */ (function () {
        function ngxLightBreakpoint() {
        }
        return ngxLightBreakpoint;
    }());
    var ngxLightAutoplay = /** @class */ (function () {
        function ngxLightAutoplay() {
        }
        return ngxLightAutoplay;
    }());

    var NgxCarouselComponent = /** @class */ (function () {
        function NgxCarouselComponent(platformId, _renderer, zone, cd) {
            var _this = this;
            this.platformId = platformId;
            this._renderer = _renderer;
            this.zone = zone;
            this.cd = cd;
            this.current = 0;
            this.currentChange = new core.EventEmitter();
            this.infiniteElmRefs = [];
            this.timeLeft = 2000;
            this.dotsLoading = true;
            this.loading = true;
            this.grabbing = false;
            this.arrowsVisible = true;
            this.addPanningClass = function () {
                _this.grabbing = true;
                _this._renderer.addClass(_this.elements().rootElement, 'grabbing');
                _this._renderer.addClass(_this.elements().containerElement, 'panning');
            };
            this.removePanningClass = function () {
                _this.grabbing = false;
                _this._renderer.removeClass(_this.elements().rootElement, 'grabbing');
                _this._renderer.removeClass(_this.elements().containerElement, 'panning');
            };
            this.addAnimationClass = function () {
                if (_this.options.animation.animationClass !== '') {
                    _this._renderer.addClass(_this.elements().containerElement, _this.options.animation.animationClass);
                }
            };
            this.removeAnimationClass = function () {
                if (_this.options.animation.animationClass !== '') {
                    _this._renderer.removeClass(_this.elements().containerElement, _this.options.animation.animationClass);
                }
            };
            this.panTo = function (value) {
                if (common.isPlatformBrowser(_this.platformId)) {
                    _this._renderer.setStyle(_this.elements().containerElement, 'transform', "translate3d(" + value + "px, 0,0)");
                }
                else {
                    _this._renderer.setStyle(_this.elements().containerElement, 'transform', "translate3d(" + value + "%, 0,0)");
                }
            };
            this.currentIndex = function (number) {
                if (!_this.infiniteMode() && number !== undefined) {
                    if (number >= 0) {
                        if (number < 0) {
                            _this.current = 0;
                            // } else if (this.currentBreakpoint().number % 1 != 0 && this.current - 1 > this.data.length) {
                            // 	this.current = this.data.length + 1 - this.currentBreakpoint().number
                        }
                        else if (number > _this.data.length - _this.currentBreakpoint().number) {
                            _this.current = _this.data.length - _this.currentBreakpoint().number;
                        }
                        else {
                            _this.current = number;
                        }
                    }
                }
                else if (number != undefined) {
                    _this.current = number;
                }
                return _this.current;
            };
            this.slowOnOutOfBounds = function (e) {
                if (!_this.options.infinite && _this.outOfBound()) {
                    e.deltaX *= 0.2;
                    e.deltaY *= 0.2;
                }
                return e;
            };
            this.scrollBackToEdge = function () {
                var root = _this.elements().rootElement.getBoundingClientRect();
                var container = _this.elements().containerElement.getBoundingClientRect();
                if (container.right < root.right) {
                    _this.goToIndex(_this.visibleElements());
                }
                if (root.left - container.left < 0) {
                    _this.goToIndex(0);
                }
            };
            this.outOfBound = function () {
                var root = _this.elements().rootElement.getBoundingClientRect();
                var container = _this.elements().containerElement.getBoundingClientRect();
                if (root.right - container.right > 0) {
                    _this.currentIndex(_this.data.length - 1);
                    return true;
                }
                if (root.left - container.left < 0) {
                    _this.currentIndex(0);
                    return true;
                }
                return false;
            };
            this.detectSwipingLeft = function (e) {
                return e.velocityX < -_this.options.swipe.swipeVelocity;
            };
            this.detectSwipingRight = function (e) {
                return e.velocityX > _this.options.swipe.swipeVelocity;
            };
            this.detectPanningLeft = function (e) {
                return e.velocityX < 1 && e.distance < -_this.carouselItemWidthVar * 1.5;
            };
            this.detectPanningRight = function (e) {
                return e.velocityX > 1 && e.distance < _this.carouselItemWidthVar * 1.5;
            };
            this.nextSlide = function () {
                _this.addAnimationClass();
                if (_this.data.length > 1) {
                    if (!_this.infiniteMode() && _this.visibleElements() < _this.currentIndex()) {
                        _this.goToIndex(_this.visibleElements());
                    }
                    else {
                        _this.goToIndex(_this.currentIndex() + 1);
                    }
                }
                setTimeout(function () {
                    _this.removeAnimationClass();
                }, _this.options.animation.animationTime);
            };
            this.prevSlide = function () {
                _this.addAnimationClass();
                if (_this.data.length > 1) {
                    if (!_this.infiniteMode() && 0 >= _this.currentIndex()) {
                        _this.goToIndex(_this.currentIndex(0));
                    }
                    else {
                        _this.goToIndex(_this.currentIndex() - 1);
                    }
                }
                setTimeout(function () {
                    _this.removeAnimationClass();
                }, _this.options.animation.animationTime);
            };
            this.startTimer = function () {
                _this.zone.runOutsideAngular(function () {
                    var autoplay = _this.autoplayMode();
                    if (autoplay && autoplay.enabled) {
                        _this.interval = setInterval(function () {
                            if (_this.timeLeft > 0) {
                                _this.timeLeft = _this.timeLeft - 100;
                            }
                            else {
                                _this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                                _this.actionDelay.next(autoplay.direction == 'left' ? _this.prevSlide : _this.nextSlide);
                            }
                        }, 100);
                    }
                });
            };
            this.pauseTimer = function () {
                _this.zone.runOutsideAngular(function () {
                    try {
                        var autoplay = _this.autoplayMode();
                        if (autoplay && autoplay.enabled) {
                            _this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                            clearInterval(_this.interval);
                        }
                        _this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                        delete _this.interval;
                    }
                    catch (_a) { }
                });
            };
            this.goToIndex = function (number) {
                if (_this.infiniteMode()) {
                    _this.panTo(-_this.carouselItemWidth() * number);
                }
                else {
                    if (number > -1 && number <= _this.data.length - _this.currentBreakpoint().number) {
                        _this.currentIndex(number);
                        _this.panTo(-_this.carouselItemWidth() * number);
                    }
                    if (number <= -1) {
                        _this.currentIndex(0);
                        _this.goToIndex(0);
                    }
                }
                _this.currentIndex(number);
            };
            this.calculateMoved = function (e) {
                var moved = Math.round(Math.abs(e.deltaX) / _this.carouselItemWidth());
                return moved > 0 ? moved : 1;
            };
            this.loading = true;
            this.actionDelay = new rxjs.Subject();
            this.throttleSub = this.actionDelay.asObservable();
            this.subRef = this.throttleSub.pipe(operators.throttle(function (val) { return rxjs.interval(_this.options.animation.animationTime + 40); })).subscribe(function (data) {
                data();
            });
        }
        NgxCarouselComponent.prototype.click = function (fn) {
            this.actionDelay.next(fn);
        };
        NgxCarouselComponent.prototype.ngOnInit = function () {
            this.dots = [];
        };
        NgxCarouselComponent.prototype.ngAfterViewInit = function () {
            this.init();
            this.loading = false;
            if (this.sufficientSlides()) {
                if (this.infiniteMode()) {
                    this.addInfiniteElm();
                }
                if (this.autoplayMode()) {
                    this.startTimer();
                }
            }
            this.goToIndex(this.current);
            this.rootElmWidth;
            this.setViewWidth();
            this.calculateDots();
        };
        NgxCarouselComponent.prototype.ngOnChanges = function () {
            if (this.elements()) {
                this.onResize();
            }
        };
        NgxCarouselComponent.prototype.ngOnDestroy = function () {
            this.pauseTimer();
            this.subRef.unsubscribe();
        };
        NgxCarouselComponent.prototype.onResize = function () {
            this.rootElmWidth;
            this.setViewWidth();
            this.calculateDots();
            if (this.sufficientSlides()) {
                if (this.infiniteMode()) {
                    this.addInfiniteElm();
                }
            }
            this.goToIndex(this.currentIndex());
        };
        NgxCarouselComponent.prototype.sufficientSlides = function () {
            this.showArrows(this.data.length > this.currentBreakpoint().number);
            return this.data.length > this.currentBreakpoint().number;
        };
        NgxCarouselComponent.prototype.showArrows = function (state) {
            this.arrowsVisible = state;
        };
        NgxCarouselComponent.prototype.rootElmWidth = function () {
            return common.isPlatformBrowser(this.platformId) ? this.elements().rootElement.getBoundingClientRect().width : 100;
        };
        NgxCarouselComponent.prototype.carouselItemWidth = function () {
            if (this.data.length > this.currentBreakpoint().number) {
                return (this.carouselItemWidthVar = this.rootElmWidth() / this.currentBreakpoint().number);
            }
            else {
                return (this.carouselItemWidthVar = this.rootElmWidth() / this.data.length);
            }
        };
        NgxCarouselComponent.prototype.currentBreakpoint = function () {
            for (var i = 0; i < this.options.breakpoints.length; i++) {
                if (this.options.breakpoints[i].width > this.rootElmWidth()) {
                    return this.options.breakpoints[i];
                }
            }
        };
        NgxCarouselComponent.prototype.elements = function () {
            if (this.sliderElement) {
                return {
                    rootElement: this.sliderElement.nativeElement,
                    containerElement: this.sliderElement.nativeElement.children[0],
                    carouselItems: this.carouselItems.toArray().map(function (x) { return x.nativeElement; }),
                };
            }
            return;
        };
        NgxCarouselComponent.prototype.setViewWidth = function () {
            var _this = this;
            this._renderer.setStyle(this.elements().containerElement, 'display', 'inline-flex');
            this._renderer.setStyle(this.elements().containerElement, 'position', 'relative');
            this.elements().carouselItems.forEach(function (element) {
                _this._renderer.addClass(element, 'slide');
                _this._renderer.setStyle(element, 'width', _this.carouselItemWidth() + 'px');
                _this._renderer.setStyle(element, 'display', 'inline-flex');
            });
            if (this.infiniteMode()) {
                this.infiniteElmRefs.forEach(function (ref) {
                    _this._renderer.addClass(ref.rootNodes[0], 'slide');
                    _this._renderer.setStyle(ref.rootNodes[0], 'width', _this.carouselItemWidth() + 'px');
                });
            }
        };
        NgxCarouselComponent.prototype.hover = function () {
            if (this.autoplayMode()) {
                if (this.autoplayMode().stopOnHover) {
                    this.pauseTimer();
                }
            }
        };
        NgxCarouselComponent.prototype.unhover = function () {
            if (this.autoplayMode()) {
                this.pauseTimer();
                this.startTimer();
            }
        };
        NgxCarouselComponent.prototype.calculateDots = function () {
            this.dots = [];
            if (this.infiniteMode()) {
                var number = this.data.length;
            }
            else {
                var number = this.data.length - this.currentBreakpoint().number + 1;
            }
            if (number > 1) {
                var results = Array.from(Array(Number(number.toFixed(0))).keys());
                this.dots = results;
                this.dotsLoading = false;
                return results;
            }
            else {
                var results = [];
                this.dots = [];
                this.dotsLoading = false;
                return results;
            }
        };
        NgxCarouselComponent.prototype.visibleElements = function () {
            return this.data.length - this.currentBreakpoint().number;
        };
        NgxCarouselComponent.prototype.addInfiniteElm = function () {
            this.infiniteElmRefs = [];
            this.infiniteContainer.clear();
            for (var i = 1; i <= this.data.length; i++) {
                var elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                    $implicit: this.data[this.data.length - i],
                    index: this.data.length - i,
                });
                this._renderer.setStyle(elm.rootNodes[0], 'position', 'absolute');
                this._renderer.setStyle(elm.rootNodes[0], 'transform', "translate3d(-" + 100 * i + "%, 0,0)");
                this._renderer.setStyle(elm.rootNodes[0], 'display', 'inline-flex');
                this._renderer.setStyle(elm.rootNodes[0], 'visibility', 'visible');
                this._renderer.setStyle(elm.rootNodes[0], 'width', this.carouselItemWidthVar + 'px');
                this._renderer.addClass(elm.rootNodes[0], 'slide');
                var elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                    $implicit: this.data[i - 1],
                    index: i - 1,
                });
                this._renderer.setStyle(elm2.rootNodes[0], 'position', 'absolute');
                this._renderer.setStyle(elm2.rootNodes[0], 'right', 0);
                this._renderer.setStyle(elm2.rootNodes[0], 'top', 0);
                this._renderer.setStyle(elm2.rootNodes[0], 'transform', "translate3d(" + 100 * i + "%, 0,0)");
                this._renderer.setStyle(elm2.rootNodes[0], 'display', 'inline-flex');
                this._renderer.setStyle(elm2.rootNodes[0], 'visibility', 'visible');
                this._renderer.setStyle(elm2.rootNodes[0], 'width', this.carouselItemWidthVar + 'px');
                this._renderer.addClass(elm2.rootNodes[0], 'slide');
                elm.detectChanges();
                elm2.detectChanges();
                this.infiniteElmRefs.push(elm);
                this.infiniteElmRefs.push(elm2);
            }
        };
        NgxCarouselComponent.prototype.infiniteHandler = function () {
            var _this = this;
            // this.removePanningClass()
            this.addAnimationClass();
            setTimeout(function () {
                _this.goToIndex(_this.currentIndex());
                _this.removeAnimationClass();
            }, this.options.animation.animationTime);
            if (0 > this.currentIndex()) {
                this.currentIndex(this.data.length - 1);
                setTimeout(function () {
                    _this.removeAnimationClass();
                    _this.goToIndex(_this.currentIndex(_this.data.length - 1));
                }, this.options.animation.animationTime + 10);
            }
            else if (this.data.length - 1 < this.currentIndex()) {
                this.currentIndex(0);
                setTimeout(function () {
                    _this.removeAnimationClass();
                    _this.goToIndex(_this.currentIndex(0));
                }, this.options.animation.animationTime + 10);
            }
            return;
        };
        NgxCarouselComponent.prototype.scrollToIndex = function (number) {
            this.addAnimationClass();
            this.goToIndex(number);
        };
        NgxCarouselComponent.prototype.infiniteMode = function () {
            return this.options.infinite;
        };
        NgxCarouselComponent.prototype.autoplayMode = function () {
            if (this.options.autoplay && this.options.autoplay.enabled) {
                return this.options.autoplay;
            }
            else {
                return false;
            }
        };
        NgxCarouselComponent.prototype.moveIndex = function (move) {
            return this.currentIndex() + move;
        };
        NgxCarouselComponent.prototype.init = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                if (_this.data.length > 1 && _this.sufficientSlides()) {
                    var sliderManager = new hammerjs.Manager(_this.elements().containerElement);
                    sliderManager.add(new hammerjs.Pan({ threshold: 0, pointers: 0 }));
                    sliderManager.on('panleft panright panend pancancel', function (e) {
                        switch (e.type) {
                            case 'panleft':
                            case 'panright':
                                _this.pauseTimer();
                                if (!_this.grabbing) {
                                    _this.removeAnimationClass();
                                    _this.addPanningClass();
                                }
                                if (_this.options.drag.draggable) {
                                    _this.panTo(-_this.current * _this.carouselItemWidthVar + 0 + e.deltaX);
                                }
                                break;
                            case 'pancancel':
                                _this.removePanningClass();
                                _this.addAnimationClass();
                                _this.goToIndex(_this.currentIndex());
                                break;
                            case 'panend':
                                // e.gesture.srcEvent.preventDefault()
                                _this.pauseTimer();
                                _this.removePanningClass();
                                _this.addAnimationClass();
                                var moved = _this.calculateMoved(e);
                                if (!_this.infiniteMode()) {
                                    if (_this.outOfBound()) {
                                        _this.scrollBackToEdge();
                                        setTimeout(function () {
                                            _this.removeAnimationClass();
                                        }, _this.options.animation.animationTime);
                                        break;
                                    }
                                }
                                if (_this.options.drag.draggable) {
                                    if (_this.detectPanningLeft(e)) {
                                        _this.addAnimationClass();
                                        _this.goToIndex(_this.moveIndex(+moved));
                                        _this.infiniteHandler();
                                        setTimeout(function () {
                                            _this.removeAnimationClass();
                                        }, _this.options.animation.animationTime);
                                        break;
                                    }
                                    if (_this.detectPanningRight(e)) {
                                        _this.addAnimationClass();
                                        if (1.00000001 < _this.currentIndex() && _this.currentIndex() < 1.999999999999) {
                                            _this.goToIndex(Math.ceil(_this.moveIndex(-moved)));
                                        }
                                        else {
                                            _this.goToIndex(_this.moveIndex(-moved));
                                        }
                                        _this.infiniteHandler();
                                        setTimeout(function () {
                                            _this.removeAnimationClass();
                                        }, _this.options.animation.animationTime);
                                        break;
                                    }
                                }
                                if (_this.options.swipe.swipeable) {
                                    if (_this.detectSwipingLeft(e)) {
                                        _this.nextSlide();
                                        _this.infiniteHandler();
                                        if (!_this.infiniteMode()) {
                                            _this.addAnimationClass();
                                            if (0.00000001 < _this.currentIndex() && _this.currentIndex() < 0.999999999999) {
                                                _this.removeAnimationClass();
                                                _this.goToIndex(0);
                                            }
                                        }
                                        break;
                                    }
                                    if (_this.detectSwipingRight(e)) {
                                        _this.prevSlide();
                                        _this.infiniteHandler();
                                        if (!_this.infiniteMode()) {
                                            if (0.00000001 < _this.currentIndex() && _this.currentIndex() < 0.999999999999) {
                                                _this.addAnimationClass();
                                                _this.goToIndex(0);
                                                _this.removeAnimationClass();
                                            }
                                        }
                                        break;
                                    }
                                }
                            // this.addAnimationClass()
                            // this.goToIndex(this.currentIndex())
                            // setTimeout(() => {
                            // 	this.removeAnimationClass()
                            // }, this.options.animation.animationTime)
                            // e.gesture.srcEvent.preventDefault()
                        }
                    });
                    return sliderManager;
                }
            });
        };
        NgxCarouselComponent.ctorParameters = function () { return [
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: core.Renderer2 },
            { type: core.NgZone },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('sliderElement', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], NgxCarouselComponent.prototype, "sliderElement", void 0);
        __decorate([
            core.ViewChild('prevElement', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], NgxCarouselComponent.prototype, "btnPrevElement", void 0);
        __decorate([
            core.ViewChild('nextElement', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], NgxCarouselComponent.prototype, "btnNextElement", void 0);
        __decorate([
            core.ViewChild('progressElement', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], NgxCarouselComponent.prototype, "progressContainerElement", void 0);
        __decorate([
            core.ContentChildren(NgxCarouselItemDirective, { read: core.ElementRef, descendants: true }),
            __metadata("design:type", core.QueryList)
        ], NgxCarouselComponent.prototype, "carouselItems", void 0);
        __decorate([
            core.ContentChild('carouselPrev', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], NgxCarouselComponent.prototype, "contentPrev", void 0);
        __decorate([
            core.ContentChild('carouselNext', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], NgxCarouselComponent.prototype, "contentNext", void 0);
        __decorate([
            core.ContentChild('carouselDot', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], NgxCarouselComponent.prototype, "dotElm", void 0);
        __decorate([
            core.ContentChild('carouselProgress', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], NgxCarouselComponent.prototype, "progressElm", void 0);
        __decorate([
            core.ContentChild('infiniteContainer', { static: false, read: core.ViewContainerRef }),
            __metadata("design:type", core.ViewContainerRef)
        ], NgxCarouselComponent.prototype, "infiniteContainer", void 0);
        __decorate([
            core.ContentChild('carouselContent', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], NgxCarouselComponent.prototype, "contentContent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], NgxCarouselComponent.prototype, "current", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgxCarouselComponent.prototype, "currentChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgxCarouselComponent.prototype, "data", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", ngxLightOptions)
        ], NgxCarouselComponent.prototype, "options", void 0);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], NgxCarouselComponent.prototype, "onResize", null);
        __decorate([
            core.HostListener('mouseover'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], NgxCarouselComponent.prototype, "hover", null);
        __decorate([
            core.HostListener('mouseout'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], NgxCarouselComponent.prototype, "unhover", null);
        NgxCarouselComponent = __decorate([
            core.Component({
                selector: 'ngx-light-carousel',
                template: "<div #sliderElement class=\"carousel\">\n\t<!-- Carousel Content -->\n\t<ng-content class=\"content\" select=\"[ngx-light-carousel-container]\"> </ng-content>\n</div>\n<!-- Previous Slide -->\n<div *ngIf=\"options.arrows\" #prevElement (click)=\"prevSlide()\" class=\"direction left\">\n\t<ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n</div>\n<!-- Next Slide -->\n<div *ngIf=\"options.arrows\" #nextElement (click)=\"nextSlide()\" class=\"direction right\">\n\t<ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n</div>\n<!-- Dots -->\n<div *ngIf=\"options.indicators\" class=\"indicators\">\n\t<li *ngFor=\"let dot of dots; let i = index\" (click)=\"scrollToIndex(i)\" [ngClass]=\"{ active: current == i }\">\n\t\t<div class=\"ball\"></div>\n\t\t<ng-container *ngTemplateOutlet=\"dotElm\"> </ng-container>\n\t</li>\n</div>\n<!-- Progress -->\n<div *ngIf=\"progressElm && options.autoplay\" #progressElement>\n\t<ng-container *ngTemplateOutlet=\"progressElm\"> </ng-container>\n</div>\n<!-- Mask -->\n<div class=\"mask\">\n\t<ng-container></ng-container>\n</div>\n",
                encapsulation: core.ViewEncapsulation.None,
                styles: [".transition *{transition:transform .2s ease-out!important}:host{position:relative}.wrapper{padding-bottom:20px;position:relative;overflow-x:hidden;overflow-y:auto}.panning img{pointer-events:none}.carousel{overflow-x:hidden;position:relative;width:100%;height:100%;padding-bottom:30px}.carousel .content{display:-ms-inline-flexbox;display:inline-flex}.content{-ms-touch-action:pan-y!important;touch-action:pan-y!important;-webkit-backface-visibility:hidden;backface-visibility:hidden;will-change:transform,opacity;transform:translate3d();-ms-perspective:1000;perspective:1000;transform:translateZ(0)}.content article{width:100%;display:block}.content article img{width:100%;display:block;background-size:cover;background-position:center}.slide{will-change:transform,opacity;transform:translate3d();-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000;-moz-perspective:1000;-ms-perspective:1000;transform:translateZ(0);perspective:1000}.direction{background-repeat:no-repeat;width:5%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none;position:absolute;height:100%;cursor:pointer;background-size:50%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;top:0;background-position:center center}.direction.left{left:0;background-image:url(\"data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20style%3D%22transform%3A%20scale(-1%2C1)%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E\")}.direction.right{right:0;background-image:url(data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E)}ul.indicators{bottom:0;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}ul.indicators li.active *{color:#000}.active .ball{background:#000;color:#000;opacity:1}.ball{width:10px;height:10px;border-radius:50%;background:#fff;border:2px solid #000}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{pointer-events:none;position:absolute;left:0;top:0;right:0;bottom:0}"]
            }),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [Object, core.Renderer2, core.NgZone, core.ChangeDetectorRef])
        ], NgxCarouselComponent);
        return NgxCarouselComponent;
    }());

    var NgxCarouselModule = /** @class */ (function () {
        function NgxCarouselModule() {
        }
        NgxCarouselModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, forms.FormsModule],
                declarations: [NgxCarouselComponent, NgxCarouselItemDirective],
                exports: [NgxCarouselComponent, NgxCarouselItemDirective],
            })
        ], NgxCarouselModule);
        return NgxCarouselModule;
    }());

    exports.NgxCarouselComponent = NgxCarouselComponent;
    exports.NgxCarouselItemDirective = NgxCarouselItemDirective;
    exports.NgxCarouselModule = NgxCarouselModule;
    exports.ngxLightAutoplay = ngxLightAutoplay;
    exports.ngxLightBreakpoint = ngxLightBreakpoint;
    exports.ngxLightOptions = ngxLightOptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-light-carousel.umd.js.map
