import { __decorate, __metadata } from "tslib";
import { Directive, Input, OnInit, TemplateRef, ViewContainerRef, } from '@angular/core';
// TODO: ssr problem should not hide on ssr
// TODO: show number change should recaculate is show and init show number
let NgxHmCarouselDynamicDirective = class NgxHmCarouselDynamicDirective {
    constructor(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.show = 1;
        this.compelete = false;
        this._view.clear();
    }
    set currentI(value) {
        if (!this.compelete) {
            const nextI = value + this.show;
            const prevI = value - this.show;
            if (this.index === 0 ||
                this.index === this.length - 1 ||
                this.index === nextI ||
                this.index === prevI ||
                this.index === value) {
                this._view.createEmbeddedView(this._template);
                this.compelete = true;
            }
        }
    }
    ngOnInit() { }
};
NgxHmCarouselDynamicDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
__decorate([
    Input('ngxHmCarouselDynamic'),
    __metadata("design:type", Number)
], NgxHmCarouselDynamicDirective.prototype, "index", void 0);
__decorate([
    Input('ngxHmCarouselDynamicLength'),
    __metadata("design:type", Number)
], NgxHmCarouselDynamicDirective.prototype, "length", void 0);
__decorate([
    Input('ngxHmCarouselDynamicShow'),
    __metadata("design:type", Object)
], NgxHmCarouselDynamicDirective.prototype, "show", void 0);
__decorate([
    Input('ngxHmCarouselDynamicIndex'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], NgxHmCarouselDynamicDirective.prototype, "currentI", null);
NgxHmCarouselDynamicDirective = __decorate([
    Directive({
        selector: '[ngxHmCarouselDynamic]',
    }),
    __metadata("design:paramtypes", [ViewContainerRef,
        TemplateRef])
], NgxHmCarouselDynamicDirective);
export { NgxHmCarouselDynamicDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhtLWNhcm91c2VsLWR5bmFtaWMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhtLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL25neC1obS1jYXJvdXNlbC1keW5hbWljLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsMkNBQTJDO0FBQzNDLDBFQUEwRTtBQUkxRSxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtJQXdCeEMsWUFDVSxLQUF1QixFQUN2QixTQUEyQjtRQUQzQixVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQXZCRixTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBbUJwQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBTXhCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQXhCRCxJQUFJLFFBQVEsQ0FBQyxLQUFhO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hDLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hDLElBQ0UsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDO2dCQUNoQixJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLO2dCQUNwQixJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUs7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUNwQjtnQkFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDdkI7U0FDRjtJQUNILENBQUM7SUFXRCxRQUFRLEtBQVUsQ0FBQztDQUNwQixDQUFBOztZQVBrQixnQkFBZ0I7WUFDWixXQUFXOztBQXpCRDtJQUE5QixLQUFLLENBQUMsc0JBQXNCLENBQUM7OzREQUFlO0FBQ1I7SUFBcEMsS0FBSyxDQUFDLDRCQUE0QixDQUFDOzs2REFBZ0I7QUFDakI7SUFBbEMsS0FBSyxDQUFDLDBCQUEwQixDQUFDOzsyREFBVTtBQUU1QztJQURDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQzs7OzZEQWdCbEM7QUFwQlUsNkJBQTZCO0lBSHpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx3QkFBd0I7S0FDbkMsQ0FBQztxQ0EwQmlCLGdCQUFnQjtRQUNaLFdBQVc7R0ExQnJCLDZCQUE2QixDQWdDekM7U0FoQ1ksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIFRPRE86IHNzciBwcm9ibGVtIHNob3VsZCBub3QgaGlkZSBvbiBzc3Jcbi8vIFRPRE86IHNob3cgbnVtYmVyIGNoYW5nZSBzaG91bGQgcmVjYWN1bGF0ZSBpcyBzaG93IGFuZCBpbml0IHNob3cgbnVtYmVyXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4SG1DYXJvdXNlbER5bmFtaWNdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4SG1DYXJvdXNlbER5bmFtaWNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljJykgaW5kZXg6IG51bWJlcjtcbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pY0xlbmd0aCcpIGxlbmd0aDogbnVtYmVyO1xuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljU2hvdycpIHNob3cgPSAxO1xuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljSW5kZXgnKVxuICBzZXQgY3VycmVudEkodmFsdWU6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5jb21wZWxldGUpIHtcbiAgICAgIGNvbnN0IG5leHRJID0gdmFsdWUgKyB0aGlzLnNob3c7XG4gICAgICBjb25zdCBwcmV2SSA9IHZhbHVlIC0gdGhpcy5zaG93O1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmluZGV4ID09PSAwIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IHRoaXMubGVuZ3RoIC0gMSB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSBuZXh0SSB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSBwcmV2SSB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX3ZpZXcuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuX3RlbXBsYXRlKTtcbiAgICAgICAgdGhpcy5jb21wZWxldGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcGVsZXRlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdmlldzogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIF90ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PixcbiAgKSB7XG4gICAgdGhpcy5fdmlldy5jbGVhcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxufVxuIl19