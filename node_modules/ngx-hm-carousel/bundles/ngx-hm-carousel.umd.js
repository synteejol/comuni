(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('resize-observer-polyfill')) :
    typeof define === 'function' && define.amd ? define('ngx-hm-carousel', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'rxjs', 'rxjs/operators', 'resize-observer-polyfill'], factory) :
    (global = global || self, factory(global['ngx-hm-carousel'] = {}, global.ng.core, global.ng.common, global.ng.forms, global.rxjs, global.rxjs.operators, global['resize-observer-polyfill']));
}(this, (function (exports, core, common, forms, rxjs, operators, ResizeObserver) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var NgxHmCarouselItemDirective = /** @class */ (function () {
        function NgxHmCarouselItemDirective() {
        }
        NgxHmCarouselItemDirective = __decorate([
            core.Directive({
                selector: '[ngx-hm-carousel-item]',
            }),
            __metadata("design:paramtypes", [])
        ], NgxHmCarouselItemDirective);
        return NgxHmCarouselItemDirective;
    }());

    // TODO: ssr problem should not hide on ssr
    // TODO: show number change should recaculate is show and init show number
    var NgxHmCarouselDynamicDirective = /** @class */ (function () {
        function NgxHmCarouselDynamicDirective(_view, _template) {
            this._view = _view;
            this._template = _template;
            this.show = 1;
            this.compelete = false;
            this._view.clear();
        }
        Object.defineProperty(NgxHmCarouselDynamicDirective.prototype, "currentI", {
            set: function (value) {
                if (!this.compelete) {
                    var nextI = value + this.show;
                    var prevI = value - this.show;
                    if (this.index === 0 ||
                        this.index === this.length - 1 ||
                        this.index === nextI ||
                        this.index === prevI ||
                        this.index === value) {
                        this._view.createEmbeddedView(this._template);
                        this.compelete = true;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        NgxHmCarouselDynamicDirective.prototype.ngOnInit = function () { };
        NgxHmCarouselDynamicDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.TemplateRef }
        ]; };
        __decorate([
            core.Input('ngxHmCarouselDynamic'),
            __metadata("design:type", Number)
        ], NgxHmCarouselDynamicDirective.prototype, "index", void 0);
        __decorate([
            core.Input('ngxHmCarouselDynamicLength'),
            __metadata("design:type", Number)
        ], NgxHmCarouselDynamicDirective.prototype, "length", void 0);
        __decorate([
            core.Input('ngxHmCarouselDynamicShow'),
            __metadata("design:type", Object)
        ], NgxHmCarouselDynamicDirective.prototype, "show", void 0);
        __decorate([
            core.Input('ngxHmCarouselDynamicIndex'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], NgxHmCarouselDynamicDirective.prototype, "currentI", null);
        NgxHmCarouselDynamicDirective = __decorate([
            core.Directive({
                selector: '[ngxHmCarouselDynamic]',
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef,
                core.TemplateRef])
        ], NgxHmCarouselDynamicDirective);
        return NgxHmCarouselDynamicDirective;
    }());

    /**
     * An observable creator for element resize.
     * @param elm the watch element.
     * @param cb when resize complete, call back function.
     * @param time resize emit time, default is 200
     */
    function resizeObservable(elm, cb, time) {
        if (time === void 0) { time = 200; }
        var elmObserve$;
        return new rxjs.Observable(function (observer) {
            elmObserve$ = new ResizeObserver(function (entries, obs) {
                observer.next(elmObserve$);
            });
            elmObserve$.observe(elm);
        }).pipe(operators.debounceTime(time), operators.tap(function () {
            cb();
        }), operators.finalize(function () {
            elmObserve$.unobserve(elm);
            elmObserve$.disconnect();
        }));
    }

    var NgxHmCarouselComponent = /** @class */ (function () {
        function NgxHmCarouselComponent(platformId, _document, _renderer, _zone, _cd) {
            var _this = this;
            this.platformId = platformId;
            this._document = _document;
            this._renderer = _renderer;
            this._zone = _zone;
            this._cd = _cd;
            /** when infinite is true, the animation time with item, default is 400. */
            this.aniTime = 400;
            /** this class will add in #containerElm when model change */
            this.aniClass = 'transition';
            /** this class will add when carousel auto play,
             * this default autoplay animation is same as aniClass
             */
            this.aniClassAuto = this.aniClass;
            /**
             * user move picture with the container width rate,
             * when more than that rate, it will go to next or prev,
             * set false will never move with distance rate,
             * default is `0.15`
             */
            this.panBoundary = 0.15;
            /** when show-num is bigger than 1, the first item align, defaulte is `center` */
            this.align = 'center';
            /**
             * disable when drag occur the child element will follow touch point.
             * default is `false`
             */
            this.notDrag = false;
            /**
             * the event binding state for stop auto play when mourse moveover
             */
            this.mourseEnable = false;
            /** each auto play between time */
            this.delay = 8000;
            /** auto play direction, default is `right`. */
            this.direction = 'right';
            /** how many number with each scroll, default is `1`. */
            this.scrollNum = 1;
            /** Could user scroll many item once, simulate with scrollbar, default is `false` */
            this.isDragMany = false;
            /** Minimal velocity required before recognizing, unit is in px per ms, default `0.3` */
            this.swipeVelocity = 0.3;
            /**
             * switch show number with custom logic like css @media (min-width: `number`px)
             */
            this.breakpoint = [];
            // using for check mouse or touchend
            this.leaveObs$ = rxjs.merge(rxjs.fromEvent(this._document, 'mouseup'), rxjs.fromEvent(this._document, 'touchend')).pipe(operators.tap(function (e) {
                _this.grabbing = false;
                e.stopPropagation();
                e.preventDefault();
            }));
            this.isFromAuto = true;
            this.isAutoNum = false;
            this.mouseOnContainer = false;
            this.alignDistance = 0;
            this.elmWidth = 0;
            this.infiniteElmRefs = [];
            this.restart = new rxjs.BehaviorSubject(null);
            this.speedChange = new rxjs.BehaviorSubject(5000);
            this.stopEvent = new rxjs.Subject();
            this.destroy$ = new rxjs.Subject();
            this._porgressWidth = 0;
            this._currentIndex = 0;
            this._showNum = 1;
            this._autoplay = false;
            this._infinite = false;
            this._tmpInfinite = false;
            this._grabbing = false;
            this._disableDrag = false;
            this.panCount = 0;
            // this variable use for check the init value is write with ngModel,
            // when init first, not set with animation
            this.hasInitWriteValue = false;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        NgxHmCarouselComponent_1 = NgxHmCarouselComponent;
        Object.defineProperty(NgxHmCarouselComponent.prototype, "disableDrag", {
            /** disable drag event with touch and mouse pan moving, default is `false` */
            get: function () {
                return this._disableDrag;
            },
            set: function (value) {
                if (this.rootElm) {
                    if (this._disableDrag !== value) {
                        if (value) {
                            this.destoryHammer();
                        }
                        else {
                            this.hammer = this.bindHammer();
                        }
                    }
                }
                this._disableDrag = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "infinite", {
            /** is the carousel can move infinite */
            get: function () {
                return this._infinite;
            },
            set: function (value) {
                var _this = this;
                this._infinite = value;
                this.infiniteElmRefs.forEach(function (ref) {
                    _this.addStyle(ref.rootNodes[0], {
                        visibility: _this.runLoop ? 'visible' : 'hidden',
                    });
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "speed", {
            /** auto play speed */
            get: function () {
                return this.speedChange.value;
            },
            set: function (value) {
                var _this = this;
                this._zone.runOutsideAngular(function () {
                    _this.speedChange.next(value);
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "showNum", {
            /**
             * how many number items to show once, default is `1`
             * set `auto` to using `[breakpoint]` set value.
             */
            get: function () {
                return this._showNum;
            },
            set: function (value) {
                if (value === 'auto') {
                    this.isAutoNum = true;
                }
                else {
                    this._showNum = +value;
                    if (this.rootElm) {
                        this.setViewWidth();
                        this.reSetAlignDistance();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "autoplay", {
            /** carousel auto play confing */
            get: function () {
                return this._autoplay;
            },
            set: function (value) {
                var _this = this;
                if (common.isPlatformBrowser(this.platformId)) {
                    if (this.elms) {
                        this.progressWidth = 0;
                        if (value) {
                            this._zone.runOutsideAngular(function () {
                                _this.doNextSub$ = _this.doNext.subscribe();
                            });
                        }
                        else {
                            if (this.doNextSub$) {
                                this.doNextSub$.unsubscribe();
                            }
                        }
                    }
                }
                this._autoplay = value;
                // if set autoplay, then the infinite is true
                if (value) {
                    this._tmpInfinite = this.infinite;
                    this.infinite = true;
                }
                else {
                    this.infinite = this._tmpInfinite;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "currentIndex", {
            get: function () {
                return this._currentIndex;
            },
            set: function (value) {
                var _this = this;
                // if now index if not equale to save index, do someting
                if (this.currentIndex !== value) {
                    // if the value is not contain with the boundary not handler
                    if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {
                        return;
                    }
                    this._currentIndex = value;
                    if (this.elms) {
                        if (this.autoplay && !this.isFromAuto) {
                            this._zone.runOutsideAngular(function () {
                                _this.stopEvent.next();
                                _this.callRestart();
                            });
                        }
                        this.drawView(this.currentIndex, this.hasInitWriteValue);
                        if (this.isDragMany) {
                            this.hasInitWriteValue = true;
                        }
                    }
                    if (0 <= this.currentIndex &&
                        this.currentIndex <= this.itemElms.length - 1) {
                        this._zone.run(function () {
                            _this.onChange(_this.currentIndex);
                            _this._cd.detectChanges();
                        });
                    }
                }
                this.isFromAuto = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "progressWidth", {
            get: function () {
                return this._porgressWidth;
            },
            set: function (value) {
                if (this.progressElm !== undefined && this.autoplay) {
                    this._porgressWidth = value;
                    this._renderer.setStyle(this.progressContainerElm.nativeElement.children[0], 'width', this.progressWidth + "%");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "grabbing", {
            get: function () {
                return this._grabbing;
            },
            set: function (value) {
                var _this = this;
                if (this._grabbing !== value) {
                    // console.log(value);
                    this._zone.run(function () {
                        _this._grabbing = value;
                        if (value) {
                            _this._renderer.addClass(_this.containerElm, 'grabbing');
                        }
                        else {
                            _this.panCount = 0;
                            _this.callRestart();
                            _this._renderer.removeClass(_this.containerElm, 'grabbing');
                        }
                        _this._cd.detectChanges();
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "left", {
            set: function (value) {
                if (common.isPlatformBrowser(this.platformId)) {
                    this._renderer.setStyle(this.containerElm, 'transform', "translateX(" + value + "px)");
                }
                else {
                    this._renderer.setStyle(this.containerElm, 'transform', "translateX(" + value + "%)");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "maxRightIndex", {
            get: function () {
                var addIndex = 0;
                switch (this.align) {
                    case 'left':
                        addIndex = 0;
                        break;
                    case 'center':
                        addIndex = this.showNum - 1;
                        break;
                    case 'right':
                        addIndex = this.showNum - 1;
                        break;
                }
                return this.itemElms.length - 1 - this._showNum + 1 + addIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "runLoop", {
            get: function () {
                return this.autoplay || this.infinite;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "lengthOne", {
            get: function () {
                return this.itemElms.length === 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "rootElmWidth", {
            get: function () {
                return common.isPlatformBrowser(this.platformId)
                    ? this.rootElm.getBoundingClientRect().width
                    : 100;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "containerElmWidth", {
            set: function (value) {
                this.setStyle(this.containerElm, 'width', value);
            },
            enumerable: true,
            configurable: true
        });
        NgxHmCarouselComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.rootElm = this.container.nativeElement;
            this.containerElm = this.rootElm.children[0];
            this.init();
            rxjs.forkJoin([
                this.bindClick(),
                // when item changed, remove old hammer binding, and reset width
                this.itemElms.changes.pipe(
                // detectChanges to change view dots
                operators.tap(function () {
                    if (_this.currentIndex > _this.itemElms.length - 1) {
                        // i can't pass the changedetection check, only the way to using timeout. :(
                        setTimeout(function () {
                            _this.currentIndex = _this.itemElms.length - 1;
                        }, 0);
                    }
                    _this.destroy();
                    _this.removeInfiniteElm();
                    _this.init();
                    _this.progressWidth = 0;
                }), operators.tap(function () { return _this._cd.detectChanges(); })),
                resizeObservable(this.rootElm, function () { return _this.containerResize(); }),
            ])
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe();
        };
        NgxHmCarouselComponent.prototype.ngOnDestroy = function () {
            this.destroy();
            this.destroy$.next();
            this.destroy$.unsubscribe();
        };
        NgxHmCarouselComponent.prototype.writeValue = function (value) {
            if (value || value === 0) {
                this.currentIndex = value;
                this.hasInitWriteValue = true;
            }
        };
        NgxHmCarouselComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        NgxHmCarouselComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        NgxHmCarouselComponent.prototype.init = function () {
            this.initVariable();
            this.setViewWidth(true);
            this.reSetAlignDistance();
            if (!this.disableDrag) {
                this.hammer = this.bindHammer();
            }
            this.drawView(this.currentIndex, false);
            if (common.isPlatformBrowser(this.platformId) && this.runLoop) {
                this.addInfiniteElm();
            }
        };
        NgxHmCarouselComponent.prototype.destroy = function () {
            this.destoryHammer();
            if (this.autoplay) {
                this.doNextSub$.unsubscribe();
            }
        };
        NgxHmCarouselComponent.prototype.destoryHammer = function () {
            if (this.hammer) {
                this.hammer.destroy();
            }
        };
        NgxHmCarouselComponent.prototype.addInfiniteElm = function () {
            for (var i = 1; i <= this.showNum; i++) {
                var elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                    $implicit: this.data[this.itemElms.length - i],
                    index: this.itemElms.length - i,
                });
                this.addStyle(elm.rootNodes[0], {
                    position: 'absolute',
                    // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                    transform: "translateX(-" + 100 * i + "%)",
                    visibility: this.runLoop ? 'visible' : 'hidden',
                });
                this.setStyle(elm.rootNodes[0], 'width', this.elmWidth);
                var elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                    $implicit: this.data[i - 1],
                    index: i - 1,
                });
                this.addStyle(elm2.rootNodes[0], {
                    // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                    position: 'absolute',
                    right: 0,
                    top: 0,
                    transform: "translateX(" + 100 * i + "%)",
                    visibility: this.runLoop ? 'visible' : 'hidden',
                });
                this.setStyle(elm2.rootNodes[0], 'width', this.elmWidth);
                elm.detectChanges();
                elm2.detectChanges();
                this.infiniteElmRefs.push(elm);
                this.infiniteElmRefs.push(elm2);
            }
        };
        NgxHmCarouselComponent.prototype.removeInfiniteElm = function () {
            this.infiniteElmRefs.forEach(function (a) {
                a.detach();
                a.destroy();
            });
            if (this.infiniteContainer) {
                this.infiniteContainer.clear();
            }
            this.infiniteElmRefs = [];
        };
        NgxHmCarouselComponent.prototype.containerResize = function () {
            this.setViewWidth();
            this.reSetAlignDistance();
            // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
            if (this.align !== 'center' && this.showNum >= this.elms.length) {
                this.currentIndex = 0;
            }
            this.drawView(this.currentIndex, false);
        };
        NgxHmCarouselComponent.prototype.initVariable = function () {
            var _this = this;
            this._zone.runOutsideAngular(function () {
                _this.elms = _this.itemElms.toArray().map(function (x) { return x.nativeElement; });
                var startEvent = _this.restart.asObservable();
                var stopEvent = _this.stopEvent.asObservable();
                if (_this.mourseEnable) {
                    startEvent = rxjs.merge(startEvent, rxjs.fromEvent(_this.containerElm, 'mouseleave').pipe(
                    // when leave, we should reverse grabbing state to set the mouseOn state,
                    // because when the grabbing, the mask will on, and it will occur leave again
                    operators.filter(function () { return !_this.grabbing; }), operators.tap(function () { return (_this.mouseOnContainer = false); })));
                    stopEvent = rxjs.merge(stopEvent, rxjs.fromEvent(_this.containerElm, 'mouseover').pipe(operators.tap(function () { return (_this.mouseOnContainer = true); })));
                }
                _this.doNext = startEvent.pipe(
                // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error
                // debounceTime(this.delay),
                operators.switchMap(function () { return _this.speedChange; }), operators.switchMap(function () {
                    return rxjs.timer(_this.delay).pipe(operators.switchMap(function () { return _this.runProgress(20); }), operators.tap(function () {
                        _this.isFromAuto = true;
                        // console.log('next');
                        if (_this.direction === 'left') {
                            _this.currentIndex -= _this.scrollNum;
                        }
                        else {
                            _this.currentIndex += _this.scrollNum;
                        }
                    }), operators.takeUntil(stopEvent.pipe(operators.tap(function () { return (_this.progressWidth = 0); }))));
                }));
                if (_this.autoplay) {
                    _this.doNextSub$ = _this.doNext.subscribe();
                }
            });
        };
        NgxHmCarouselComponent.prototype.reSetAlignDistance = function () {
            switch (this.align) {
                case 'center':
                    this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;
                    break;
                case 'left':
                    this.alignDistance = 0;
                    break;
                case 'right':
                    this.alignDistance = this.rootElmWidth - this.elmWidth;
                    break;
            }
        };
        NgxHmCarouselComponent.prototype.setViewWidth = function (isInit) {
            var _this = this;
            if (this.isAutoNum) {
                this._showNum = this.getAutoNum();
            }
            this._renderer.addClass(this.containerElm, 'grab');
            if (isInit) {
                // remain one elm height
                this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
            }
            this.elmWidth = this.rootElmWidth / this._showNum;
            this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
            this.containerElmWidth = this.elmWidth * this.elms.length;
            this._renderer.setStyle(this.containerElm, 'position', 'relative');
            this.infiniteElmRefs.forEach(function (ref) {
                _this.setStyle(ref.rootNodes[0], 'width', _this.elmWidth);
            });
            this.elms.forEach(function (elm) {
                _this.setStyle(elm, 'width', _this.elmWidth);
            });
        };
        NgxHmCarouselComponent.prototype.bindHammer = function () {
            var _this = this;
            if (!common.isPlatformBrowser(this.platformId)) {
                return null;
            }
            return this._zone.runOutsideAngular(function () {
                var hm = new Hammer.Manager(_this.containerElm);
                var pan = new Hammer.Pan({
                    direction: Hammer.DIRECTION_HORIZONTAL,
                    threshold: 0,
                });
                hm.add(pan);
                hm.on('panleft panright panend pancancel', function (e) {
                    // console.log(e.type);
                    if (_this.lengthOne) {
                        return;
                    }
                    _this.removeContainerTransition();
                    if (_this.autoplay) {
                        _this._zone.runOutsideAngular(function () {
                            _this.stopEvent.next();
                        });
                    }
                    switch (e.type) {
                        case 'panleft':
                        case 'panright':
                            _this.panCount++;
                            // only when panmove more than two times, set move
                            if (_this.panCount < 2) {
                                return;
                            }
                            _this.grabbing = true;
                            // When show-num is bigger than length, stop hammer
                            if (_this.align !== 'center' && _this.showNum >= _this.elms.length) {
                                _this.hammer.stop(true);
                                return;
                            }
                            // Slow down at the first and last pane.
                            if (!_this.runLoop && _this.outOfBound(e.type)) {
                                e.deltaX *= 0.2;
                            }
                            if (!_this.notDrag) {
                                _this.left =
                                    -_this.currentIndex * _this.elmWidth +
                                        _this.alignDistance +
                                        e.deltaX;
                            }
                            // // if not dragmany, when bigger than half
                            if (!_this.isDragMany) {
                                if (Math.abs(e.deltaX) > _this.elmWidth * 0.5) {
                                    if (e.deltaX > 0) {
                                        _this.currentIndex -= _this.scrollNum;
                                    }
                                    else {
                                        _this.currentIndex += _this.scrollNum;
                                    }
                                    _this.hammer.stop(true);
                                    return;
                                }
                            }
                            break;
                        case 'pancancel':
                            _this.drawView(_this.currentIndex);
                            break;
                        case 'panend':
                            // if boundary more than rate
                            if (_this.panBoundary !== false &&
                                Math.abs(e.deltaX) > _this.elmWidth * _this.panBoundary) {
                                var moveNum = _this.isDragMany
                                    ? Math.ceil(Math.abs(e.deltaX) / _this.elmWidth)
                                    : _this.scrollNum;
                                var prevIndex = _this.currentIndex - moveNum;
                                var nextIndex = _this.currentIndex + moveNum;
                                // if right
                                if (e.deltaX > 0) {
                                    _this.goPrev(prevIndex);
                                    // left
                                }
                                else {
                                    _this.goNext(nextIndex);
                                }
                                break;
                            }
                            else if (e.velocityX < -_this.swipeVelocity && e.distance > 10) {
                                _this.goNext(_this.currentIndex + _this.scrollNum);
                            }
                            else if (e.velocityX > _this.swipeVelocity && e.distance > 10) {
                                _this.goPrev(_this.currentIndex - _this.scrollNum);
                            }
                            else {
                                _this.drawView(_this.currentIndex);
                            }
                            break;
                    }
                });
                return hm;
            });
        };
        NgxHmCarouselComponent.prototype.goPrev = function (prevIndex) {
            if (!this.runLoop && prevIndex < 0) {
                prevIndex = 0;
                this.drawView(0);
            }
            this.currentIndex = prevIndex;
        };
        NgxHmCarouselComponent.prototype.goNext = function (nextIndex) {
            if (!this.runLoop && nextIndex > this.maxRightIndex) {
                nextIndex = this.maxRightIndex;
                this.drawView(nextIndex);
            }
            this.currentIndex = nextIndex;
        };
        NgxHmCarouselComponent.prototype.bindClick = function () {
            var _this = this;
            if (this.btnNext && this.btnPrev) {
                return rxjs.forkJoin([
                    rxjs.fromEvent(this.btnNext.nativeElement, 'click').pipe(operators.tap(function () { return _this.currentIndex++; })),
                    rxjs.fromEvent(this.btnPrev.nativeElement, 'click').pipe(operators.tap(function () { return _this.currentIndex--; })),
                ]);
            }
            return rxjs.of(null);
        };
        NgxHmCarouselComponent.prototype.callRestart = function () {
            var _this = this;
            // if that is autoplay
            // if that mouse is not on container( only mouse-enable is true, the state maybe true)
            // if now is grabbing, skip this restart, using grabbing change restart
            if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {
                this._zone.runOutsideAngular(function () {
                    _this.restart.next(null);
                });
            }
        };
        NgxHmCarouselComponent.prototype.drawView = function (index, isAnimation, isFromAuto) {
            if (isAnimation === void 0) { isAnimation = true; }
            if (isFromAuto === void 0) { isFromAuto = this.isFromAuto; }
            // move element only on length is more than 1
            if (this.elms.length > 1) {
                this.removeContainerTransition();
                this.left = -(index * this.elmWidth - this.alignDistance);
                if (isAnimation) {
                    if (isFromAuto) {
                        this._renderer.addClass(this.containerElm, this.aniClassAuto);
                    }
                    else {
                        this._renderer.addClass(this.containerElm, this.aniClass);
                    }
                    // if infinite move to next index with timeout
                    this.infiniteHandler(index);
                }
            }
            else {
                this.left = this.alignDistance;
            }
        };
        NgxHmCarouselComponent.prototype.removeContainerTransition = function () {
            this._renderer.removeClass(this.containerElm, this.aniClass);
            this._renderer.removeClass(this.containerElm, this.aniClassAuto);
        };
        NgxHmCarouselComponent.prototype.infiniteHandler = function (index) {
            var _this = this;
            if (this.runLoop) {
                var state_1 = 0;
                state_1 = index < 0 ? -1 : state_1;
                state_1 = index > this.itemElms.length - 1 ? 1 : state_1;
                // index = index % this._showNum;
                if (state_1 !== 0) {
                    switch (state_1) {
                        case -1:
                            this._currentIndex =
                                (this.itemElms.length + index) % this.itemElms.length;
                            break;
                        case 1:
                            this._currentIndex = index % this.itemElms.length;
                            break;
                    }
                    var isFromAuto_1 = this.isFromAuto;
                    if (this.saveTimeOut) {
                        this.saveTimeOut.unsubscribe();
                    }
                    this.saveTimeOut = rxjs.timer(this.aniTime)
                        .pipe(operators.switchMap(function () {
                        // if it is any loop carousel, the next event need wait the timeout complete
                        if (_this.aniTime === _this.speed) {
                            _this.removeContainerTransition();
                            _this.left =
                                -((_this._currentIndex - state_1) * _this.elmWidth) +
                                    _this.alignDistance;
                            return rxjs.timer(50).pipe(operators.tap(function () {
                                _this.drawView(_this.currentIndex, _this.hasInitWriteValue, isFromAuto_1);
                            }));
                        }
                        else {
                            _this.drawView(_this.currentIndex, false);
                        }
                        return rxjs.of(null);
                    }), operators.takeUntil(this.stopEvent))
                        .subscribe();
                }
            }
        };
        NgxHmCarouselComponent.prototype.outOfBound = function (type) {
            switch (type) {
                case 'panleft':
                    return this.currentIndex >= this.maxRightIndex;
                case 'panright':
                    return this.currentIndex <= 0;
            }
        };
        NgxHmCarouselComponent.prototype.runProgress = function (betweenTime) {
            var _this = this;
            return this._zone.runOutsideAngular(function () {
                var howTimes = _this.speed / betweenTime;
                var everyIncrease = (100 / _this.speed) * betweenTime;
                return rxjs.interval(betweenTime).pipe(operators.tap(function (t) {
                    _this.progressWidth = (t % howTimes) * everyIncrease;
                }), operators.bufferCount(Math.round(howTimes), 0));
            });
        };
        NgxHmCarouselComponent.prototype.getAutoNum = function () {
            var currWidth = this.rootElmWidth;
            // check user has had set breakpoint
            if (this.breakpoint.length > 0) {
                // get the last bigget point
                var now = this.breakpoint.find(function (b) {
                    return b.width >= currWidth;
                });
                // if find value, it is current width
                if (now) {
                    return now.number;
                }
                return this.breakpoint[this.breakpoint.length - 1].number;
            }
            // system init show number
            var initNum = 3;
            // 610
            if (currWidth > 300) {
                return Math.floor(initNum + currWidth / 200);
            }
            return initNum;
        };
        NgxHmCarouselComponent.prototype.addStyle = function (elm, style) {
            var _this = this;
            if (style) {
                Object.keys(style).forEach(function (key) {
                    var value = style[key];
                    _this._renderer.setStyle(elm, key, value);
                });
            }
        };
        NgxHmCarouselComponent.prototype.setStyle = function (elm, style, value) {
            if (common.isPlatformBrowser(this.platformId)) {
                this._renderer.setStyle(elm, style, value + "px");
            }
            else {
                this._renderer.setStyle(elm, style, value + "%");
            }
        };
        var NgxHmCarouselComponent_1;
        NgxHmCarouselComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: core.Renderer2 },
            { type: core.NgZone },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('containerElm'),
            __metadata("design:type", core.ElementRef)
        ], NgxHmCarouselComponent.prototype, "container", void 0);
        __decorate([
            core.ViewChild('prev'),
            __metadata("design:type", core.ElementRef)
        ], NgxHmCarouselComponent.prototype, "btnPrev", void 0);
        __decorate([
            core.ViewChild('next'),
            __metadata("design:type", core.ElementRef)
        ], NgxHmCarouselComponent.prototype, "btnNext", void 0);
        __decorate([
            core.ViewChild('progress'),
            __metadata("design:type", core.ElementRef)
        ], NgxHmCarouselComponent.prototype, "progressContainerElm", void 0);
        __decorate([
            core.ContentChildren(NgxHmCarouselItemDirective, {
                read: core.ElementRef,
                descendants: true,
            }),
            __metadata("design:type", core.QueryList)
        ], NgxHmCarouselComponent.prototype, "itemElms", void 0);
        __decorate([
            core.ContentChild('carouselPrev'),
            __metadata("design:type", core.TemplateRef)
        ], NgxHmCarouselComponent.prototype, "contentPrev", void 0);
        __decorate([
            core.ContentChild('carouselNext'),
            __metadata("design:type", core.TemplateRef)
        ], NgxHmCarouselComponent.prototype, "contentNext", void 0);
        __decorate([
            core.ContentChild('carouselDot'),
            __metadata("design:type", core.TemplateRef)
        ], NgxHmCarouselComponent.prototype, "dotElm", void 0);
        __decorate([
            core.ContentChild('carouselProgress'),
            __metadata("design:type", core.TemplateRef)
        ], NgxHmCarouselComponent.prototype, "progressElm", void 0);
        __decorate([
            core.ContentChild('infiniteContainer', { read: core.ViewContainerRef }),
            __metadata("design:type", core.ViewContainerRef)
        ], NgxHmCarouselComponent.prototype, "infiniteContainer", void 0);
        __decorate([
            core.ContentChild('carouselContent'),
            __metadata("design:type", core.TemplateRef)
        ], NgxHmCarouselComponent.prototype, "contentContent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgxHmCarouselComponent.prototype, "data", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "aniTime", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "aniClass", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "aniClassAuto", void 0);
        __decorate([
            core.Input('pan-boundary'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "panBoundary", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], NgxHmCarouselComponent.prototype, "align", void 0);
        __decorate([
            core.Input('not-follow-pan'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "notDrag", void 0);
        __decorate([
            core.Input('mourse-enable'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "mourseEnable", void 0);
        __decorate([
            core.Input('between-delay'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "delay", void 0);
        __decorate([
            core.Input('autoplay-direction'),
            __metadata("design:type", String)
        ], NgxHmCarouselComponent.prototype, "direction", void 0);
        __decorate([
            core.Input('scroll-num'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "scrollNum", void 0);
        __decorate([
            core.Input('drag-many'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "isDragMany", void 0);
        __decorate([
            core.Input('swipe-velocity'),
            __metadata("design:type", Object)
        ], NgxHmCarouselComponent.prototype, "swipeVelocity", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgxHmCarouselComponent.prototype, "breakpoint", void 0);
        __decorate([
            core.Input('disable-drag'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], NgxHmCarouselComponent.prototype, "disableDrag", null);
        __decorate([
            core.Input('infinite'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], NgxHmCarouselComponent.prototype, "infinite", null);
        __decorate([
            core.Input('autoplay-speed'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], NgxHmCarouselComponent.prototype, "speed", null);
        __decorate([
            core.Input('show-num'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], NgxHmCarouselComponent.prototype, "showNum", null);
        __decorate([
            core.Input('autoplay'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], NgxHmCarouselComponent.prototype, "autoplay", null);
        NgxHmCarouselComponent = NgxHmCarouselComponent_1 = __decorate([
            core.Component({
                selector: 'ngx-hm-carousel',
                template: "<div #containerElm class=\"carousel\">\n  <!-- main content -->\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\n  <!-- left -->\n  <div #prev *ngIf=\"contentPrev\" class=\"direction left\">\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n  </div>\n  <!--  right -->\n  <div #next *ngIf=\"contentNext\" class=\"direction right\">\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n  </div>\n  <!-- indicators -->\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\n    <li *ngFor=\"let dot of itemElms; let i = index\" (click)=\"currentIndex = i\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          dotElm;\n          context: {\n            $implicit: {\n              index: i,\n              currentIndex: currentIndex\n            }\n          }\n        \"\n      >\n      </ng-container>\n    </li>\n  </ul>\n  <!-- progress -->\n  <div *ngIf=\"progressElm && autoplay\" #progress>\n    <ng-container *ngTemplateOutlet=\"progressElm\"> </ng-container>\n  </div>\n\n  <div class=\"mask\" *ngIf=\"grabbing\">\n    <ng-container *ngIf=\"leaveObs$ | async\"></ng-container>\n  </div>\n</div>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return NgxHmCarouselComponent_1; }),
                        multi: true,
                    },
                ],
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:-webkit-box!important;display:flex!important;flex-wrap:nowrap!important;-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;cursor:pointer;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{position:absolute;left:0;top:0;right:0;bottom:0}"]
            }),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __param(1, core.Inject(common.DOCUMENT)),
            __metadata("design:paramtypes", [Object, Object, core.Renderer2,
                core.NgZone,
                core.ChangeDetectorRef])
        ], NgxHmCarouselComponent);
        return NgxHmCarouselComponent;
    }());

    var NgxHmCarouselModule = /** @class */ (function () {
        function NgxHmCarouselModule() {
        }
        NgxHmCarouselModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, forms.FormsModule],
                declarations: [
                    NgxHmCarouselComponent,
                    NgxHmCarouselDynamicDirective,
                    NgxHmCarouselItemDirective,
                ],
                exports: [
                    NgxHmCarouselComponent,
                    NgxHmCarouselDynamicDirective,
                    NgxHmCarouselItemDirective,
                ],
            })
        ], NgxHmCarouselModule);
        return NgxHmCarouselModule;
    }());

    exports.NgxHmCarouselComponent = NgxHmCarouselComponent;
    exports.NgxHmCarouselDynamicDirective = NgxHmCarouselDynamicDirective;
    exports.NgxHmCarouselItemDirective = NgxHmCarouselItemDirective;
    exports.NgxHmCarouselModule = NgxHmCarouselModule;
    exports.resizeObservable = resizeObservable;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-hm-carousel.umd.js.map
