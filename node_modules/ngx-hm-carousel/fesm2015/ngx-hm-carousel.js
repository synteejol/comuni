import { __decorate, __metadata, __param } from 'tslib';
import { Directive, ViewContainerRef, TemplateRef, Input, Inject, PLATFORM_ID, Renderer2, NgZone, ChangeDetectorRef, ViewChild, ElementRef, ContentChildren, QueryList, ContentChild, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { Observable, merge, fromEvent, BehaviorSubject, Subject, forkJoin, timer, of, interval } from 'rxjs';
import { debounceTime, tap, finalize, takeUntil, filter, switchMap, bufferCount } from 'rxjs/operators';
import ResizeObserver from 'resize-observer-polyfill';

let NgxHmCarouselItemDirective = class NgxHmCarouselItemDirective {
    constructor() { }
};
NgxHmCarouselItemDirective = __decorate([
    Directive({
        selector: '[ngx-hm-carousel-item]',
    }),
    __metadata("design:paramtypes", [])
], NgxHmCarouselItemDirective);

// TODO: ssr problem should not hide on ssr
// TODO: show number change should recaculate is show and init show number
let NgxHmCarouselDynamicDirective = class NgxHmCarouselDynamicDirective {
    constructor(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.show = 1;
        this.compelete = false;
        this._view.clear();
    }
    set currentI(value) {
        if (!this.compelete) {
            const nextI = value + this.show;
            const prevI = value - this.show;
            if (this.index === 0 ||
                this.index === this.length - 1 ||
                this.index === nextI ||
                this.index === prevI ||
                this.index === value) {
                this._view.createEmbeddedView(this._template);
                this.compelete = true;
            }
        }
    }
    ngOnInit() { }
};
NgxHmCarouselDynamicDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
__decorate([
    Input('ngxHmCarouselDynamic'),
    __metadata("design:type", Number)
], NgxHmCarouselDynamicDirective.prototype, "index", void 0);
__decorate([
    Input('ngxHmCarouselDynamicLength'),
    __metadata("design:type", Number)
], NgxHmCarouselDynamicDirective.prototype, "length", void 0);
__decorate([
    Input('ngxHmCarouselDynamicShow'),
    __metadata("design:type", Object)
], NgxHmCarouselDynamicDirective.prototype, "show", void 0);
__decorate([
    Input('ngxHmCarouselDynamicIndex'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], NgxHmCarouselDynamicDirective.prototype, "currentI", null);
NgxHmCarouselDynamicDirective = __decorate([
    Directive({
        selector: '[ngxHmCarouselDynamic]',
    }),
    __metadata("design:paramtypes", [ViewContainerRef,
        TemplateRef])
], NgxHmCarouselDynamicDirective);

/**
 * An observable creator for element resize.
 * @param elm the watch element.
 * @param cb when resize complete, call back function.
 * @param time resize emit time, default is 200
 */
function resizeObservable(elm, cb, time = 200) {
    let elmObserve$;
    return new Observable((observer) => {
        elmObserve$ = new ResizeObserver((entries, obs) => {
            observer.next(elmObserve$);
        });
        elmObserve$.observe(elm);
    }).pipe(debounceTime(time), tap(() => {
        cb();
    }), finalize(() => {
        elmObserve$.unobserve(elm);
        elmObserve$.disconnect();
    }));
}

var NgxHmCarouselComponent_1;
let NgxHmCarouselComponent = NgxHmCarouselComponent_1 = class NgxHmCarouselComponent {
    constructor(platformId, _document, _renderer, _zone, _cd) {
        this.platformId = platformId;
        this._document = _document;
        this._renderer = _renderer;
        this._zone = _zone;
        this._cd = _cd;
        /** when infinite is true, the animation time with item, default is 400. */
        this.aniTime = 400;
        /** this class will add in #containerElm when model change */
        this.aniClass = 'transition';
        /** this class will add when carousel auto play,
         * this default autoplay animation is same as aniClass
         */
        this.aniClassAuto = this.aniClass;
        /**
         * user move picture with the container width rate,
         * when more than that rate, it will go to next or prev,
         * set false will never move with distance rate,
         * default is `0.15`
         */
        this.panBoundary = 0.15;
        /** when show-num is bigger than 1, the first item align, defaulte is `center` */
        this.align = 'center';
        /**
         * disable when drag occur the child element will follow touch point.
         * default is `false`
         */
        this.notDrag = false;
        /**
         * the event binding state for stop auto play when mourse moveover
         */
        this.mourseEnable = false;
        /** each auto play between time */
        this.delay = 8000;
        /** auto play direction, default is `right`. */
        this.direction = 'right';
        /** how many number with each scroll, default is `1`. */
        this.scrollNum = 1;
        /** Could user scroll many item once, simulate with scrollbar, default is `false` */
        this.isDragMany = false;
        /** Minimal velocity required before recognizing, unit is in px per ms, default `0.3` */
        this.swipeVelocity = 0.3;
        /**
         * switch show number with custom logic like css @media (min-width: `number`px)
         */
        this.breakpoint = [];
        // using for check mouse or touchend
        this.leaveObs$ = merge(fromEvent(this._document, 'mouseup'), fromEvent(this._document, 'touchend')).pipe(tap((e) => {
            this.grabbing = false;
            e.stopPropagation();
            e.preventDefault();
        }));
        this.isFromAuto = true;
        this.isAutoNum = false;
        this.mouseOnContainer = false;
        this.alignDistance = 0;
        this.elmWidth = 0;
        this.infiniteElmRefs = [];
        this.restart = new BehaviorSubject(null);
        this.speedChange = new BehaviorSubject(5000);
        this.stopEvent = new Subject();
        this.destroy$ = new Subject();
        this._porgressWidth = 0;
        this._currentIndex = 0;
        this._showNum = 1;
        this._autoplay = false;
        this._infinite = false;
        this._tmpInfinite = false;
        this._grabbing = false;
        this._disableDrag = false;
        this.panCount = 0;
        // this variable use for check the init value is write with ngModel,
        // when init first, not set with animation
        this.hasInitWriteValue = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    /** disable drag event with touch and mouse pan moving, default is `false` */
    get disableDrag() {
        return this._disableDrag;
    }
    set disableDrag(value) {
        if (this.rootElm) {
            if (this._disableDrag !== value) {
                if (value) {
                    this.destoryHammer();
                }
                else {
                    this.hammer = this.bindHammer();
                }
            }
        }
        this._disableDrag = value;
    }
    /** is the carousel can move infinite */
    get infinite() {
        return this._infinite;
    }
    set infinite(value) {
        this._infinite = value;
        this.infiniteElmRefs.forEach((ref) => {
            this.addStyle(ref.rootNodes[0], {
                visibility: this.runLoop ? 'visible' : 'hidden',
            });
        });
    }
    /** auto play speed */
    get speed() {
        return this.speedChange.value;
    }
    set speed(value) {
        this._zone.runOutsideAngular(() => {
            this.speedChange.next(value);
        });
    }
    /**
     * how many number items to show once, default is `1`
     * set `auto` to using `[breakpoint]` set value.
     */
    get showNum() {
        return this._showNum;
    }
    set showNum(value) {
        if (value === 'auto') {
            this.isAutoNum = true;
        }
        else {
            this._showNum = +value;
            if (this.rootElm) {
                this.setViewWidth();
                this.reSetAlignDistance();
            }
        }
    }
    /** carousel auto play confing */
    get autoplay() {
        return this._autoplay;
    }
    set autoplay(value) {
        if (isPlatformBrowser(this.platformId)) {
            if (this.elms) {
                this.progressWidth = 0;
                if (value) {
                    this._zone.runOutsideAngular(() => {
                        this.doNextSub$ = this.doNext.subscribe();
                    });
                }
                else {
                    if (this.doNextSub$) {
                        this.doNextSub$.unsubscribe();
                    }
                }
            }
        }
        this._autoplay = value;
        // if set autoplay, then the infinite is true
        if (value) {
            this._tmpInfinite = this.infinite;
            this.infinite = true;
        }
        else {
            this.infinite = this._tmpInfinite;
        }
    }
    get currentIndex() {
        return this._currentIndex;
    }
    set currentIndex(value) {
        // if now index if not equale to save index, do someting
        if (this.currentIndex !== value) {
            // if the value is not contain with the boundary not handler
            if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {
                return;
            }
            this._currentIndex = value;
            if (this.elms) {
                if (this.autoplay && !this.isFromAuto) {
                    this._zone.runOutsideAngular(() => {
                        this.stopEvent.next();
                        this.callRestart();
                    });
                }
                this.drawView(this.currentIndex, this.hasInitWriteValue);
                if (this.isDragMany) {
                    this.hasInitWriteValue = true;
                }
            }
            if (0 <= this.currentIndex &&
                this.currentIndex <= this.itemElms.length - 1) {
                this._zone.run(() => {
                    this.onChange(this.currentIndex);
                    this._cd.detectChanges();
                });
            }
        }
        this.isFromAuto = false;
    }
    get progressWidth() {
        return this._porgressWidth;
    }
    set progressWidth(value) {
        if (this.progressElm !== undefined && this.autoplay) {
            this._porgressWidth = value;
            this._renderer.setStyle(this.progressContainerElm.nativeElement.children[0], 'width', `${this.progressWidth}%`);
        }
    }
    get grabbing() {
        return this._grabbing;
    }
    set grabbing(value) {
        if (this._grabbing !== value) {
            // console.log(value);
            this._zone.run(() => {
                this._grabbing = value;
                if (value) {
                    this._renderer.addClass(this.containerElm, 'grabbing');
                }
                else {
                    this.panCount = 0;
                    this.callRestart();
                    this._renderer.removeClass(this.containerElm, 'grabbing');
                }
                this._cd.detectChanges();
            });
        }
    }
    set left(value) {
        if (isPlatformBrowser(this.platformId)) {
            this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}px)`);
        }
        else {
            this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}%)`);
        }
    }
    get maxRightIndex() {
        let addIndex = 0;
        switch (this.align) {
            case 'left':
                addIndex = 0;
                break;
            case 'center':
                addIndex = this.showNum - 1;
                break;
            case 'right':
                addIndex = this.showNum - 1;
                break;
        }
        return this.itemElms.length - 1 - this._showNum + 1 + addIndex;
    }
    get runLoop() {
        return this.autoplay || this.infinite;
    }
    get lengthOne() {
        return this.itemElms.length === 1;
    }
    get rootElmWidth() {
        return isPlatformBrowser(this.platformId)
            ? this.rootElm.getBoundingClientRect().width
            : 100;
    }
    set containerElmWidth(value) {
        this.setStyle(this.containerElm, 'width', value);
    }
    ngAfterViewInit() {
        this.rootElm = this.container.nativeElement;
        this.containerElm = this.rootElm.children[0];
        this.init();
        forkJoin([
            this.bindClick(),
            // when item changed, remove old hammer binding, and reset width
            this.itemElms.changes.pipe(
            // detectChanges to change view dots
            tap(() => {
                if (this.currentIndex > this.itemElms.length - 1) {
                    // i can't pass the changedetection check, only the way to using timeout. :(
                    setTimeout(() => {
                        this.currentIndex = this.itemElms.length - 1;
                    }, 0);
                }
                this.destroy();
                this.removeInfiniteElm();
                this.init();
                this.progressWidth = 0;
            }), tap(() => this._cd.detectChanges())),
            resizeObservable(this.rootElm, () => this.containerResize()),
        ])
            .pipe(takeUntil(this.destroy$))
            .subscribe();
    }
    ngOnDestroy() {
        this.destroy();
        this.destroy$.next();
        this.destroy$.unsubscribe();
    }
    writeValue(value) {
        if (value || value === 0) {
            this.currentIndex = value;
            this.hasInitWriteValue = true;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    init() {
        this.initVariable();
        this.setViewWidth(true);
        this.reSetAlignDistance();
        if (!this.disableDrag) {
            this.hammer = this.bindHammer();
        }
        this.drawView(this.currentIndex, false);
        if (isPlatformBrowser(this.platformId) && this.runLoop) {
            this.addInfiniteElm();
        }
    }
    destroy() {
        this.destoryHammer();
        if (this.autoplay) {
            this.doNextSub$.unsubscribe();
        }
    }
    destoryHammer() {
        if (this.hammer) {
            this.hammer.destroy();
        }
    }
    addInfiniteElm() {
        for (let i = 1; i <= this.showNum; i++) {
            const elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[this.itemElms.length - i],
                index: this.itemElms.length - i,
            });
            this.addStyle(elm.rootNodes[0], {
                position: 'absolute',
                // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                transform: `translateX(-${100 * i}%)`,
                visibility: this.runLoop ? 'visible' : 'hidden',
            });
            this.setStyle(elm.rootNodes[0], 'width', this.elmWidth);
            const elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[i - 1],
                index: i - 1,
            });
            this.addStyle(elm2.rootNodes[0], {
                // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                position: 'absolute',
                right: 0,
                top: 0,
                transform: `translateX(${100 * i}%)`,
                visibility: this.runLoop ? 'visible' : 'hidden',
            });
            this.setStyle(elm2.rootNodes[0], 'width', this.elmWidth);
            elm.detectChanges();
            elm2.detectChanges();
            this.infiniteElmRefs.push(elm);
            this.infiniteElmRefs.push(elm2);
        }
    }
    removeInfiniteElm() {
        this.infiniteElmRefs.forEach((a) => {
            a.detach();
            a.destroy();
        });
        if (this.infiniteContainer) {
            this.infiniteContainer.clear();
        }
        this.infiniteElmRefs = [];
    }
    containerResize() {
        this.setViewWidth();
        this.reSetAlignDistance();
        // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
        if (this.align !== 'center' && this.showNum >= this.elms.length) {
            this.currentIndex = 0;
        }
        this.drawView(this.currentIndex, false);
    }
    initVariable() {
        this._zone.runOutsideAngular(() => {
            this.elms = this.itemElms.toArray().map((x) => x.nativeElement);
            let startEvent = this.restart.asObservable();
            let stopEvent = this.stopEvent.asObservable();
            if (this.mourseEnable) {
                startEvent = merge(startEvent, fromEvent(this.containerElm, 'mouseleave').pipe(
                // when leave, we should reverse grabbing state to set the mouseOn state,
                // because when the grabbing, the mask will on, and it will occur leave again
                filter(() => !this.grabbing), tap(() => (this.mouseOnContainer = false))));
                stopEvent = merge(stopEvent, fromEvent(this.containerElm, 'mouseover').pipe(tap(() => (this.mouseOnContainer = true))));
            }
            this.doNext = startEvent.pipe(
            // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error
            // debounceTime(this.delay),
            switchMap(() => this.speedChange), switchMap(() => timer(this.delay).pipe(switchMap(() => this.runProgress(20)), tap(() => {
                this.isFromAuto = true;
                // console.log('next');
                if (this.direction === 'left') {
                    this.currentIndex -= this.scrollNum;
                }
                else {
                    this.currentIndex += this.scrollNum;
                }
            }), takeUntil(stopEvent.pipe(tap(() => (this.progressWidth = 0)))))));
            if (this.autoplay) {
                this.doNextSub$ = this.doNext.subscribe();
            }
        });
    }
    reSetAlignDistance() {
        switch (this.align) {
            case 'center':
                this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;
                break;
            case 'left':
                this.alignDistance = 0;
                break;
            case 'right':
                this.alignDistance = this.rootElmWidth - this.elmWidth;
                break;
        }
    }
    setViewWidth(isInit) {
        if (this.isAutoNum) {
            this._showNum = this.getAutoNum();
        }
        this._renderer.addClass(this.containerElm, 'grab');
        if (isInit) {
            // remain one elm height
            this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        }
        this.elmWidth = this.rootElmWidth / this._showNum;
        this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        this.containerElmWidth = this.elmWidth * this.elms.length;
        this._renderer.setStyle(this.containerElm, 'position', 'relative');
        this.infiniteElmRefs.forEach((ref) => {
            this.setStyle(ref.rootNodes[0], 'width', this.elmWidth);
        });
        this.elms.forEach((elm) => {
            this.setStyle(elm, 'width', this.elmWidth);
        });
    }
    bindHammer() {
        if (!isPlatformBrowser(this.platformId)) {
            return null;
        }
        return this._zone.runOutsideAngular(() => {
            const hm = new Hammer.Manager(this.containerElm);
            const pan = new Hammer.Pan({
                direction: Hammer.DIRECTION_HORIZONTAL,
                threshold: 0,
            });
            hm.add(pan);
            hm.on('panleft panright panend pancancel', (e) => {
                // console.log(e.type);
                if (this.lengthOne) {
                    return;
                }
                this.removeContainerTransition();
                if (this.autoplay) {
                    this._zone.runOutsideAngular(() => {
                        this.stopEvent.next();
                    });
                }
                switch (e.type) {
                    case 'panleft':
                    case 'panright':
                        this.panCount++;
                        // only when panmove more than two times, set move
                        if (this.panCount < 2) {
                            return;
                        }
                        this.grabbing = true;
                        // When show-num is bigger than length, stop hammer
                        if (this.align !== 'center' && this.showNum >= this.elms.length) {
                            this.hammer.stop(true);
                            return;
                        }
                        // Slow down at the first and last pane.
                        if (!this.runLoop && this.outOfBound(e.type)) {
                            e.deltaX *= 0.2;
                        }
                        if (!this.notDrag) {
                            this.left =
                                -this.currentIndex * this.elmWidth +
                                    this.alignDistance +
                                    e.deltaX;
                        }
                        // // if not dragmany, when bigger than half
                        if (!this.isDragMany) {
                            if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {
                                if (e.deltaX > 0) {
                                    this.currentIndex -= this.scrollNum;
                                }
                                else {
                                    this.currentIndex += this.scrollNum;
                                }
                                this.hammer.stop(true);
                                return;
                            }
                        }
                        break;
                    case 'pancancel':
                        this.drawView(this.currentIndex);
                        break;
                    case 'panend':
                        // if boundary more than rate
                        if (this.panBoundary !== false &&
                            Math.abs(e.deltaX) > this.elmWidth * this.panBoundary) {
                            const moveNum = this.isDragMany
                                ? Math.ceil(Math.abs(e.deltaX) / this.elmWidth)
                                : this.scrollNum;
                            const prevIndex = this.currentIndex - moveNum;
                            const nextIndex = this.currentIndex + moveNum;
                            // if right
                            if (e.deltaX > 0) {
                                this.goPrev(prevIndex);
                                // left
                            }
                            else {
                                this.goNext(nextIndex);
                            }
                            break;
                        }
                        else if (e.velocityX < -this.swipeVelocity && e.distance > 10) {
                            this.goNext(this.currentIndex + this.scrollNum);
                        }
                        else if (e.velocityX > this.swipeVelocity && e.distance > 10) {
                            this.goPrev(this.currentIndex - this.scrollNum);
                        }
                        else {
                            this.drawView(this.currentIndex);
                        }
                        break;
                }
            });
            return hm;
        });
    }
    goPrev(prevIndex) {
        if (!this.runLoop && prevIndex < 0) {
            prevIndex = 0;
            this.drawView(0);
        }
        this.currentIndex = prevIndex;
    }
    goNext(nextIndex) {
        if (!this.runLoop && nextIndex > this.maxRightIndex) {
            nextIndex = this.maxRightIndex;
            this.drawView(nextIndex);
        }
        this.currentIndex = nextIndex;
    }
    bindClick() {
        if (this.btnNext && this.btnPrev) {
            return forkJoin([
                fromEvent(this.btnNext.nativeElement, 'click').pipe(tap(() => this.currentIndex++)),
                fromEvent(this.btnPrev.nativeElement, 'click').pipe(tap(() => this.currentIndex--)),
            ]);
        }
        return of(null);
    }
    callRestart() {
        // if that is autoplay
        // if that mouse is not on container( only mouse-enable is true, the state maybe true)
        // if now is grabbing, skip this restart, using grabbing change restart
        if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {
            this._zone.runOutsideAngular(() => {
                this.restart.next(null);
            });
        }
    }
    drawView(index, isAnimation = true, isFromAuto = this.isFromAuto) {
        // move element only on length is more than 1
        if (this.elms.length > 1) {
            this.removeContainerTransition();
            this.left = -(index * this.elmWidth - this.alignDistance);
            if (isAnimation) {
                if (isFromAuto) {
                    this._renderer.addClass(this.containerElm, this.aniClassAuto);
                }
                else {
                    this._renderer.addClass(this.containerElm, this.aniClass);
                }
                // if infinite move to next index with timeout
                this.infiniteHandler(index);
            }
        }
        else {
            this.left = this.alignDistance;
        }
    }
    removeContainerTransition() {
        this._renderer.removeClass(this.containerElm, this.aniClass);
        this._renderer.removeClass(this.containerElm, this.aniClassAuto);
    }
    infiniteHandler(index) {
        if (this.runLoop) {
            let state = 0;
            state = index < 0 ? -1 : state;
            state = index > this.itemElms.length - 1 ? 1 : state;
            // index = index % this._showNum;
            if (state !== 0) {
                switch (state) {
                    case -1:
                        this._currentIndex =
                            (this.itemElms.length + index) % this.itemElms.length;
                        break;
                    case 1:
                        this._currentIndex = index % this.itemElms.length;
                        break;
                }
                const isFromAuto = this.isFromAuto;
                if (this.saveTimeOut) {
                    this.saveTimeOut.unsubscribe();
                }
                this.saveTimeOut = timer(this.aniTime)
                    .pipe(switchMap(() => {
                    // if it is any loop carousel, the next event need wait the timeout complete
                    if (this.aniTime === this.speed) {
                        this.removeContainerTransition();
                        this.left =
                            -((this._currentIndex - state) * this.elmWidth) +
                                this.alignDistance;
                        return timer(50).pipe(tap(() => {
                            this.drawView(this.currentIndex, this.hasInitWriteValue, isFromAuto);
                        }));
                    }
                    else {
                        this.drawView(this.currentIndex, false);
                    }
                    return of(null);
                }), takeUntil(this.stopEvent))
                    .subscribe();
            }
        }
    }
    outOfBound(type) {
        switch (type) {
            case 'panleft':
                return this.currentIndex >= this.maxRightIndex;
            case 'panright':
                return this.currentIndex <= 0;
        }
    }
    runProgress(betweenTime) {
        return this._zone.runOutsideAngular(() => {
            const howTimes = this.speed / betweenTime;
            const everyIncrease = (100 / this.speed) * betweenTime;
            return interval(betweenTime).pipe(tap((t) => {
                this.progressWidth = (t % howTimes) * everyIncrease;
            }), bufferCount(Math.round(howTimes), 0));
        });
    }
    getAutoNum() {
        const currWidth = this.rootElmWidth;
        // check user has had set breakpoint
        if (this.breakpoint.length > 0) {
            // get the last bigget point
            const now = this.breakpoint.find((b) => {
                return b.width >= currWidth;
            });
            // if find value, it is current width
            if (now) {
                return now.number;
            }
            return this.breakpoint[this.breakpoint.length - 1].number;
        }
        // system init show number
        const initNum = 3;
        // 610
        if (currWidth > 300) {
            return Math.floor(initNum + currWidth / 200);
        }
        return initNum;
    }
    addStyle(elm, style) {
        if (style) {
            Object.keys(style).forEach((key) => {
                const value = style[key];
                this._renderer.setStyle(elm, key, value);
            });
        }
    }
    setStyle(elm, style, value) {
        if (isPlatformBrowser(this.platformId)) {
            this._renderer.setStyle(elm, style, `${value}px`);
        }
        else {
            this._renderer.setStyle(elm, style, `${value}%`);
        }
    }
};
NgxHmCarouselComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
__decorate([
    ViewChild('containerElm'),
    __metadata("design:type", ElementRef)
], NgxHmCarouselComponent.prototype, "container", void 0);
__decorate([
    ViewChild('prev'),
    __metadata("design:type", ElementRef)
], NgxHmCarouselComponent.prototype, "btnPrev", void 0);
__decorate([
    ViewChild('next'),
    __metadata("design:type", ElementRef)
], NgxHmCarouselComponent.prototype, "btnNext", void 0);
__decorate([
    ViewChild('progress'),
    __metadata("design:type", ElementRef)
], NgxHmCarouselComponent.prototype, "progressContainerElm", void 0);
__decorate([
    ContentChildren(NgxHmCarouselItemDirective, {
        read: ElementRef,
        descendants: true,
    }),
    __metadata("design:type", QueryList)
], NgxHmCarouselComponent.prototype, "itemElms", void 0);
__decorate([
    ContentChild('carouselPrev'),
    __metadata("design:type", TemplateRef)
], NgxHmCarouselComponent.prototype, "contentPrev", void 0);
__decorate([
    ContentChild('carouselNext'),
    __metadata("design:type", TemplateRef)
], NgxHmCarouselComponent.prototype, "contentNext", void 0);
__decorate([
    ContentChild('carouselDot'),
    __metadata("design:type", TemplateRef)
], NgxHmCarouselComponent.prototype, "dotElm", void 0);
__decorate([
    ContentChild('carouselProgress'),
    __metadata("design:type", TemplateRef)
], NgxHmCarouselComponent.prototype, "progressElm", void 0);
__decorate([
    ContentChild('infiniteContainer', { read: ViewContainerRef }),
    __metadata("design:type", ViewContainerRef)
], NgxHmCarouselComponent.prototype, "infiniteContainer", void 0);
__decorate([
    ContentChild('carouselContent'),
    __metadata("design:type", TemplateRef)
], NgxHmCarouselComponent.prototype, "contentContent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgxHmCarouselComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "aniTime", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "aniClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "aniClassAuto", void 0);
__decorate([
    Input('pan-boundary'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "panBoundary", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxHmCarouselComponent.prototype, "align", void 0);
__decorate([
    Input('not-follow-pan'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "notDrag", void 0);
__decorate([
    Input('mourse-enable'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "mourseEnable", void 0);
__decorate([
    Input('between-delay'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "delay", void 0);
__decorate([
    Input('autoplay-direction'),
    __metadata("design:type", String)
], NgxHmCarouselComponent.prototype, "direction", void 0);
__decorate([
    Input('scroll-num'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "scrollNum", void 0);
__decorate([
    Input('drag-many'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "isDragMany", void 0);
__decorate([
    Input('swipe-velocity'),
    __metadata("design:type", Object)
], NgxHmCarouselComponent.prototype, "swipeVelocity", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgxHmCarouselComponent.prototype, "breakpoint", void 0);
__decorate([
    Input('disable-drag'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NgxHmCarouselComponent.prototype, "disableDrag", null);
__decorate([
    Input('infinite'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NgxHmCarouselComponent.prototype, "infinite", null);
__decorate([
    Input('autoplay-speed'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NgxHmCarouselComponent.prototype, "speed", null);
__decorate([
    Input('show-num'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NgxHmCarouselComponent.prototype, "showNum", null);
__decorate([
    Input('autoplay'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NgxHmCarouselComponent.prototype, "autoplay", null);
NgxHmCarouselComponent = NgxHmCarouselComponent_1 = __decorate([
    Component({
        selector: 'ngx-hm-carousel',
        template: "<div #containerElm class=\"carousel\">\n  <!-- main content -->\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\n  <!-- left -->\n  <div #prev *ngIf=\"contentPrev\" class=\"direction left\">\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n  </div>\n  <!--  right -->\n  <div #next *ngIf=\"contentNext\" class=\"direction right\">\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n  </div>\n  <!-- indicators -->\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\n    <li *ngFor=\"let dot of itemElms; let i = index\" (click)=\"currentIndex = i\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          dotElm;\n          context: {\n            $implicit: {\n              index: i,\n              currentIndex: currentIndex\n            }\n          }\n        \"\n      >\n      </ng-container>\n    </li>\n  </ul>\n  <!-- progress -->\n  <div *ngIf=\"progressElm && autoplay\" #progress>\n    <ng-container *ngTemplateOutlet=\"progressElm\"> </ng-container>\n  </div>\n\n  <div class=\"mask\" *ngIf=\"grabbing\">\n    <ng-container *ngIf=\"leaveObs$ | async\"></ng-container>\n  </div>\n</div>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => NgxHmCarouselComponent_1),
                multi: true,
            },
        ],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:-webkit-box!important;display:flex!important;flex-wrap:nowrap!important;-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;cursor:pointer;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{position:absolute;left:0;top:0;right:0;bottom:0}"]
    }),
    __param(0, Inject(PLATFORM_ID)),
    __param(1, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Object, Renderer2,
        NgZone,
        ChangeDetectorRef])
], NgxHmCarouselComponent);

let NgxHmCarouselModule = class NgxHmCarouselModule {
};
NgxHmCarouselModule = __decorate([
    NgModule({
        imports: [CommonModule, FormsModule],
        declarations: [
            NgxHmCarouselComponent,
            NgxHmCarouselDynamicDirective,
            NgxHmCarouselItemDirective,
        ],
        exports: [
            NgxHmCarouselComponent,
            NgxHmCarouselDynamicDirective,
            NgxHmCarouselItemDirective,
        ],
    })
], NgxHmCarouselModule);

/*
 * Public API Surface of ngx-hm-carousel
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxHmCarouselComponent, NgxHmCarouselDynamicDirective, NgxHmCarouselItemDirective, NgxHmCarouselModule, resizeObservable };
//# sourceMappingURL=ngx-hm-carousel.js.map
