import { AfterContentInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { YoutubePlayerService } from './ngx-youtube-player.service';
import * as ɵngcc0 from '@angular/core';
export declare class YoutubePlayerComponent implements AfterContentInit {
    playerService: YoutubePlayerService;
    private elementRef;
    private renderer;
    videoId: string;
    height: number;
    width: number;
    /**
     * @description sets the protocol by the navigator object
     * if there is no window, it sets a default http protocol
     * unless the protocol is set from outside
     */
    protocol: string;
    playerVars: YT.PlayerVars;
    ready: EventEmitter<YT.Player>;
    change: EventEmitter<YT.PlayerEvent>;
    constructor(playerService: YoutubePlayerService, elementRef: ElementRef, renderer: Renderer2);
    ngAfterContentInit(): void;
    getProtocol(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YoutubePlayerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YoutubePlayerComponent, "youtube-player", never, { "videoId": "videoId"; "height": "height"; "width": "width"; "protocol": "protocol"; "playerVars": "playerVars"; }, { "ready": "ready"; "change": "change"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXlvdXR1YmUtcGxheWVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gteW91dHViZS1wbGF5ZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgWW91dHViZVBsYXllclNlcnZpY2UgfSBmcm9tICcuL25neC15b3V0dWJlLXBsYXllci5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFlvdXR1YmVQbGF5ZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwbGF5ZXJTZXJ2aWNlOiBZb3V0dWJlUGxheWVyU2VydmljZTtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICB2aWRlb0lkOiBzdHJpbmc7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gc2V0cyB0aGUgcHJvdG9jb2wgYnkgdGhlIG5hdmlnYXRvciBvYmplY3RcbiAgICAgKiBpZiB0aGVyZSBpcyBubyB3aW5kb3csIGl0IHNldHMgYSBkZWZhdWx0IGh0dHAgcHJvdG9jb2xcbiAgICAgKiB1bmxlc3MgdGhlIHByb3RvY29sIGlzIHNldCBmcm9tIG91dHNpZGVcbiAgICAgKi9cbiAgICBwcm90b2NvbDogc3RyaW5nO1xuICAgIHBsYXllclZhcnM6IFlULlBsYXllclZhcnM7XG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjxZVC5QbGF5ZXI+O1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPFlULlBsYXllckV2ZW50PjtcbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXJTZXJ2aWNlOiBZb3V0dWJlUGxheWVyU2VydmljZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgZ2V0UHJvdG9jb2woKTogc3RyaW5nO1xufVxuIl19