import { NgZone } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { IPlayerApiScriptOptions, IPlayerOutputs, IPlayerSize } from './models';
import * as ɵngcc0 from '@angular/core';
export declare function win(): Window & typeof globalThis;
export declare function YouTubeRef(): typeof YT;
export declare function YouTubePlayerRef(): typeof YT.Player;
export declare const defaultSizes: {
    height: number;
    width: number;
};
export declare class YoutubePlayerService {
    private zone;
    api: ReplaySubject<any>;
    private ytApiLoaded;
    constructor(zone: NgZone);
    loadPlayerApi(options: IPlayerApiScriptOptions): void;
    setupPlayer(elementId: string, outputs: IPlayerOutputs, sizes: IPlayerSize, videoId: string, playerVars: YT.PlayerVars): void;
    play(player: YT.Player): void;
    pause(player: YT.Player): void;
    playVideo(media: any, player: YT.Player): void;
    isPlaying(player: YT.Player): boolean;
    createPlayer(elementId: string, outputs: IPlayerOutputs, sizes: IPlayerSize, videoId?: string, playerVars?: YT.PlayerVars): YT.Player;
    toggleFullScreen(player: YT.Player, isFullScreen: boolean | null | undefined): void;
    generateUniqueId(): string;
    private createApi;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YoutubePlayerService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXlvdXR1YmUtcGxheWVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibmd4LXlvdXR1YmUtcGxheWVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElQbGF5ZXJBcGlTY3JpcHRPcHRpb25zLCBJUGxheWVyT3V0cHV0cywgSVBsYXllclNpemUgfSBmcm9tICcuL21vZGVscyc7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiB3aW4oKTogV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXM7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBZb3VUdWJlUmVmKCk6IHR5cGVvZiBZVDtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIFlvdVR1YmVQbGF5ZXJSZWYoKTogdHlwZW9mIFlULlBsYXllcjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRlZmF1bHRTaXplczoge1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG59O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgWW91dHViZVBsYXllclNlcnZpY2Uge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBhcGk6IFJlcGxheVN1YmplY3Q8YW55PjtcbiAgICBwcml2YXRlIHl0QXBpTG9hZGVkO1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSk7XG4gICAgbG9hZFBsYXllckFwaShvcHRpb25zOiBJUGxheWVyQXBpU2NyaXB0T3B0aW9ucyk6IHZvaWQ7XG4gICAgc2V0dXBQbGF5ZXIoZWxlbWVudElkOiBzdHJpbmcsIG91dHB1dHM6IElQbGF5ZXJPdXRwdXRzLCBzaXplczogSVBsYXllclNpemUsIHZpZGVvSWQ6IHN0cmluZywgcGxheWVyVmFyczogWVQuUGxheWVyVmFycyk6IHZvaWQ7XG4gICAgcGxheShwbGF5ZXI6IFlULlBsYXllcik6IHZvaWQ7XG4gICAgcGF1c2UocGxheWVyOiBZVC5QbGF5ZXIpOiB2b2lkO1xuICAgIHBsYXlWaWRlbyhtZWRpYTogYW55LCBwbGF5ZXI6IFlULlBsYXllcik6IHZvaWQ7XG4gICAgaXNQbGF5aW5nKHBsYXllcjogWVQuUGxheWVyKTogYm9vbGVhbjtcbiAgICBjcmVhdGVQbGF5ZXIoZWxlbWVudElkOiBzdHJpbmcsIG91dHB1dHM6IElQbGF5ZXJPdXRwdXRzLCBzaXplczogSVBsYXllclNpemUsIHZpZGVvSWQ/OiBzdHJpbmcsIHBsYXllclZhcnM/OiBZVC5QbGF5ZXJWYXJzKTogWVQuUGxheWVyO1xuICAgIHRvZ2dsZUZ1bGxTY3JlZW4ocGxheWVyOiBZVC5QbGF5ZXIsIGlzRnVsbFNjcmVlbjogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQpOiB2b2lkO1xuICAgIGdlbmVyYXRlVW5pcXVlSWQoKTogc3RyaW5nO1xuICAgIHByaXZhdGUgY3JlYXRlQXBpO1xufVxuIl19